/**
 * @package   	JCE
 * @copyright 	Copyright (c) 2009-2016 Ryan Demmer. All rights reserved.
 * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * JCE is free software. This version may have been modified pursuant
 * to the GNU General Public License, and as distributed it includes or
 * is derivative of works licensed under the GNU General Public License or
 * other free or open source software licenses.
 */

/**
 * Joomla! IeCursor Fix function override
 */
function IeCursorFix() {
    return true;
}

function jInsertEditorText(text, editor) {
    WFEditor.insert(editor, text);
}

/**
 * Widget Factory Editor
 */
(function() {
    var winLoaded = false,
        each = tinymce.each,
        explode = tinymce.explode,
        DOM = tinymce.DOM,
        Event = tinymce.dom.Event;

    function ucfirst(s) {
        return s.substring(0, 1).toUpperCase() + s.substring(1);
    }

    var WFEditor = {
        _bookmark: {},
        getSite: function(base) {
            var site, host;
            // get url from browser
            var u = document.location.href;
            // if bas is a full url
            if (base.indexOf('http') !== -1) {
                // get the host part of the url eg: www.mysite.com
                host = base.substr(base.indexOf('://') + 3);
                // get the
                site = host.substr(host.indexOf('/'));
            } else {
                site = u.substr(0, u.indexOf(base) + base.length);
            }

            if (u.indexOf('/administrator/') !== -1) {
                site = site + 'administrator/';
            }

            return site;
        },
        /**
         * Initialise JContentEditor
         * @param {Object} settings TinyMCE Settings
         */
        init: function(settings) {
            var self = this;

            var base = settings.base_url;
            var site = this.getSite(base);

            // fix https in base url
            if (/https:\/\//.test(document.location.href)) {
                base = base.replace(/http:/, 'https:');
            }

            // set default values
            settings.token = settings.token || 0;
            settings.component_id = settings.component_id || 0;

            // set preinit object to prevent tinymce from generating baseURL
            window.tinyMCEPreInit = {};
            // set baseURL, suffix and query string
            tinymce.extend(tinymce, {
                baseURL: base + 'components/com_jce/editor/tiny_mce',
                suffix: '',
                query: settings.token + '=1&component_id=' + settings.component_id
            });

            var indent = 'p,h1,h2,h3,h4,h5,h6,blockquote,div,title,style,pre,script,td,ul,li,area,table,thead,tfoot,tbody,tr,section,article,hgroup,aside,figure,object,video,audio';

            // remove submit triggers
            this.settings = tinymce.extend({
                document_base_url: base,
                site_url: site,
                mode: 'textareas',
                schema: "mixed",
                //entity_encoding: 'raw',
                editor_selector: 'wf-editor',
                editor_deselector: 'wf-no-editor',
                urlconverter_callback: 'WFEditor.convertURL',
                //popup_css: base + 'components/com_jce/editor/libraries/css/popup.css',
                add_form_submit_trigger: false,
                submit_patch: false,
                theme: 'none',
                invalid_elements: 'applet,iframe,object,embed,script,style,body,bgsound,base,basefont,frame,frameset,head,html,id,ilayer,layer,link,meta,name,title,xml',
                plugins: '',
                external_plugins: {},
                whitespace_elements: 'pre,script,style,textarea,code',
                fix_list_elements: true,
                indent_before: indent,
                indent_after: indent,
                popup_css: false,
                keep_styles: false,
                update_styles: true,
                compress: {
                    'css': true,
                    'javascript': true
                }
            }, settings);

            if (this.settings) {
                try {
                    var s = this.settings;

                    if (s.compress.css) {
                        tinymce.extend(this.settings, {
                            content_css: false,
                            editor_css: false
                        });
                    }

                    // mark javascript files loaded
                    this._markLoaded();

                    // skip loading plugin languages that don't exist
                    if (s.skip_plugin_languages) {
                        var sl = tinymce.ScriptLoader,
                            URI = tinyMCE.baseURI;
                        each(s.skip_plugin_languages.split(','), function(n) {
                            if (n) {
                                sl.markDone(URI.toAbsolute('plugins/' + n + '/langs/' + s.language + '.js'));
                                sl.add(URI.toAbsolute('plugins/' + n + '/langs/en.js'));
                            }
                        });
                    }
                    WFEditor.load();
                } catch (e) {
                    //console.log(e);
                }
            }
        },
        _markLoaded: function() {
            var self = this,
                s = this.settings,
                each = tinymce.each,
                ln = s.language.split(',');

            var suffix = s.suffix || '';

            function load(u) {
                tinymce.ScriptLoader.markDone(tinyMCE.baseURL + '/' + u);
            }

            /*if (s.compress.javascript == 0) {
                // development mode
                if (VERSION.indexOf('@@') != -1) {
                    return;
                }

                each(['autolink', 'cleanup', 'core', 'code', 'colorpicker', 'upload', 'format'], function(n) {
                    load('plugins/' + n + '/editor_plugin' + suffix + '.js');
                });
            }

            // Mark themes loaded
            load('themes/advanced/editor_template' + suffix + '.js');
            load('themes/none/editor_template' + suffix + '.js');*/

            if (s.compress.javascript == 1) {
                each(s.external_plugins, function(url, name) {
                    load(url);
                });

                // Add plugins with languages
                each(s.plugins.split(','), function(n) {
                    if (n) {
                        load('plugins/' + n + '/editor_plugin' + suffix + '.js');

                        each(ln, function(c) {
                            if (c) {
                                load('plugins/' + n + '/langs/' + c + '.js');
                            }
                        });
                    }
                });
            }
        },
        setBookmark: function(ed) {
            var self = this;

            function isHidden(ed) {
                return ed.isHidden() || DOM.getStyle(ed.id + '_ifr', 'visibility') == 'hidden';
            }

            function isEditor(el) {
                return DOM.getParent(el, 'div.mceEditor, div.mceSplitButtonMenu, div.mceListBoxMenu, div.mceDropDown');
            }

            Event.add(document.body, 'mousedown', function(e) {
                var el = e.target;

                if (isEditor(el)) {
                    return;
                }

                if (!isHidden(ed) && ed.selection) {
                    var n = ed.selection.getNode();

                    if (DOM.getParent(n, 'body#tinymce')) {
                        ed.lastSelectionBookmark = ed.selection.getBookmark(1);
                    }
                }
            });
        },
        load: function() {
            var self = this,
                loaded;

            var s = this.settings;

            // pass settings object to tinymce
            tinymce.settings = s;

            // setup editor before init
            tinyMCE.onAddEditor.add(function(mgr, ed) {
                // load packer css
                if (s.compress.css) {
                    ed.onPreInit.add(function() {
                        ed.dom.loadCSS(s.site_url + 'index.php?option=com_jce&view=editor&layout=editor&task=pack&type=css&context=content&component_id=' + s.component_id + '&' + s.token + '=1');
                    });
                }

                // create tabs
                if (s.theme === "advanced") {
                    self._createTabs(ed);
                }

                // create bookmark
                self.setBookmark(ed);

                // form submit trigger
                ed.onInit.add(function() {
                    ed.onSubmit.addToTop(function() {
                        if (ed.initialized && !ed.isHidden()) {
                            ed.save();
                            ed.isNotDirty = 1;
                        }
                    });
                });

                // Form submit patch
                ed.onBeforeRenderUI.add(function() {
                    var n = ed.getElement().form;

                    if (!n || n._mceOldSubmit) {
                        return;
                    }

                    // Check page uses id="submit" or name="submit" for it's submit button
                    if (!n.submit.nodeType && !n.submit.length) {
                        ed.formElement = n;
                        n._mceOldSubmit = n.submit;
                        n.submit = function() {

                            // Save all instances
                            tinymce.each(tinymce.editors, function(e) {
                                if (e.initialized && !e.isHidden()) {
                                    e.save();
                                }
                            });

                            ed.isNotDirty = 1;

                            return ed.formElement._mceOldSubmit(ed.formElement);
                        };
                    }
                    n = null;
                });
            });

            function _load() {
                if (!loaded) {
                    // set loaded flag
                    loaded = true;
                    // create editor
                    return self.create();
                }
            }

            // load editor when page fully loaded
            Event.add(window, 'load', function() {
                _load();
            });
            // wait until dom is ready with delay
            Event.add(document, 'init', function() {
                window.setTimeout(function() {
                    _load();
                }, 1000);
            });
        },
        /**
         * Create Editors
         */
        create: function(elements) {
            var self = this,
                s = this.settings;

            if (elements) {
                s.mode = 'exact';
                s.elements = elements;
            }

            try {
                // create the toggle button
                if (s.theme === "advanced" && (tinymce.is(s.toggle) ? s.toggle : 1)) {
                    elements = elements || DOM.select('.wf-editor');

                    each(elements, function(el) {
                        // get header
                        var header = DOM.getPrev(el, '.wf-editor-header');

                        // create toggle button
                        var btn = DOM.add(header, 'a', {
                            'href': '#',
                            'class': 'wf-editor-toggle'
                        }, 'Toggle Editor');

                        // get stored state
                        var state = tinymce.util.Cookie.get('wf-editor-state');

                        if (!state || !tinymce.is(state)) {
                            state = tinymce.is(s.toggle_state) ? s.toggle_state : 1;
                        }

                        // cast to integer
                        state = parseInt(state);

                        Event.add(btn, 'click', function(e) {
                            e.preventDefault();
                            self._toggleEditor(el);
                        });

                        if (!state) {
                            DOM.removeClass(el, 'wf-editor');
                            DOM.addClass(el, 'wf-no-editor');

                            DOM.hide(DOM.select('ul.nav-tabs', header));
                            DOM.addClass(el.parentNode, 'wf-editor-toggle-off');
                        }
                    });
                }

                tinymce.init(s);
            } catch (e) {
                alert(e);
            }
        },

        _toggleEditor: function(el) {
            var self = this;

            var ed = tinymce.get(el.id);

            // turn it on
            if (!ed) {
                // add loader
                DOM.addClass(el.parentNode, 'mce-loading');

                DOM.removeClass(el, 'wf-no-editor');
                DOM.removeClass(el.parentNode, 'wf-editor-toggle-off');

                // store state
                tinymce.util.Cookie.set('wf-editor-state', 1);

                // switch editor on
                tinymce.execCommand('mceToggleEditor', false, el.id);

                // remove loader
                setTimeout(function() {
                    DOM.removeClass(el.parentNode, 'mce-loading');
                }, 1000);
            } else {
                if (ed.isHidden()) {
                    DOM.addClass(el, 'wf-editor');

                    DOM.show(DOM.select('ul.nav-tabs', el.parentNode));
                    DOM.removeClass(el.parentNode, 'wf-editor-toggle-off');

                    // store state
                    tinymce.util.Cookie.set('wf-editor-state', 1);

                    var activeTab = sessionStorage.getItem('wf-editor-tabs') || 'wf-editor-wysiwyg';

                    // hide textarea
                    DOM.hide(ed.getElement());

                    switch (activeTab) {
                        case 'wf-editor-wysiwyg':
                            ed.show();
                            break;
                        case 'wf-editor-source':
                            ed.plugins.source.toggle();
                            break;
                        case 'wf-editor-preview':
                            ed.plugins.preview.toggle();
                            break;
                    }
                } else {
                    DOM.addClass(el, 'wf-no-editor');

                    DOM.hide(DOM.select('ul.nav-tabs', el.parentNode));
                    DOM.addClass(el.parentNode, 'wf-editor-toggle-off');

                    var height = sessionStorage.getItem('wf-editor-container-height');

                    // set textarea height
                    if (height) {
                        DOM.setStyle(ed.getElement(), 'height', height);
                    }

                    // store state
                    tinymce.util.Cookie.set('wf-editor-state', 0);

                    if (ed.plugins.source) {
                        ed.plugins.source.hide();
                    }
                    if (ed.plugins.preview) {
                        ed.plugins.preview.hide();
                    }

                    ed.hide();
                }
            }
        },

        // Get a reference to the current editor
        _getEditor: function(el) {
            var ed, win = window;

            // tinymce is in the parent window
            if (window.parent.tinymce) {
                win = window.parent;
            }

            if (el) {
                if (typeof el === 'string') {
                    el = document.getElementById(el);
                }

                // use element passed in
                if (el && el.id) {
                    ed = win.tinymce.get(el.id);
                }
            }

            // get active editor
            if (!ed) {
                ed = win.tinymce.activeEditor;
            }

            // return tinymce
            if (ed && !DOM.isHidden(ed.id + '_parent')) {
                return ed;
            }

            if (ed && !DOM.isHidden(ed.id + '_editor_source')) {
                return ed.plugins.source;
            }

            return false;
        },

        _loadContent: function(ed) {
            var el = ed.getElement();

            // get source code
            if (!DOM.isHidden(ed.id + '_editor_source')) {
                var code = ed.plugins.source.getContent();

                if (code !== null) {
                    if (!/TEXTAREA|INPUT/i.test(el.nodeName)) {
                        el.innerHTML = code;
                    } else {
                        el.value = code;
                    }

                    ed.load();
                }
            }
        },

        _toggleTab: function(ed, tab) {
            var self = this,
                s = this.settings;

            // get textarea element
            var el = ed.getElement();

            // set loader
            DOM.addClass(el.parentNode, 'mce-loading');

            // store container height before hiding editor
            if (!DOM.isHidden(ed.id + '_parent') && !DOM.hasClass(el.parentNode, 'mce-fullscreen')) {
                ed.settings.container_height = ed.getContainer().offsetHeight;
                // store in session
                sessionStorage.setItem('wf-editor-container-height', ed.settings.container_height);

                ed.settings.container_width = ed.getContainer().offsetWidth;
                // store in session
                sessionStorage.setItem('wf-editor-container-width', ed.settings.container_width);
            }

            // source code
            if (tab === "wf-editor-source") {
                ed.hide();
                // hide textarea
                DOM.hide(el);

                // hide preview
                if (ed.plugins.preview) {
                    ed.plugins.preview.hide();
                }

                // toggle source code
                return ed.plugins.source.toggle();
            }

            // preview
            if (tab === "wf-editor-preview") {
                // pass content to textarea and load
                self._loadContent(ed);

                ed.hide();
                // hide textarea
                DOM.hide(el);

                // hode source
                if (ed.plugins.source) {
                    ed.plugins.source.hide();
                }

                // toggle preview
                return ed.plugins.preview.toggle();
            }

            // pass content to textarea and load
            self._loadContent(ed);

            if (ed.plugins.source) {
                ed.plugins.source.hide();
            }
            if (ed.plugins.preview) {
                ed.plugins.preview.hide();
            }

            // resize iframe
            DOM.setStyle(ed.id + '_ifr', 'max-width', DOM.getStyle(el.parentNode, 'max-width'));

            ed.show();

            DOM.removeClass(el.parentNode, 'mce-loading');
        },

        _createTabs: function(ed) {
            var self = this,
                s = this.settings;

            // get plugins list as array
            var plugins = s.plugins.split(',');

            // we need at least one of these to show tabs
            if (tinymce.inArray(plugins, 'preview') < 0 && tinymce.inArray(plugins, 'source', plugins) < 0) {
                return false;
            }

            // get header
            var header = DOM.getPrev(ed.getElement(), '.wf-editor-header');

            var ul = DOM.add(header, 'ul', {
                'class': 'wf-editor-tabs nav nav-tabs'
            });

            var activeTab = sessionStorage.getItem('wf-editor-tabs') || 'wf-editor-wysiwyg';

            // Preview tab
            if (tinymce.inArray(plugins, 'preview') !== -1) {
                var previewTab = DOM.add(ul, 'li', {}, '<a href="#wf-editor-preview">' + ed.getLang('tab_preview', 'Preview') + '</a>');
            }

            // Source tab
            if (tinymce.inArray(plugins, 'source') !== -1) {
                var sourceTab = DOM.add(ul, 'li', {}, '<a href="#wf-editor-source">' + ed.getLang('tab_code', 'Code') + '</a>');

                if (activeTab === "wf-editor-source") {
                    DOM.addClass(sourceTab, 'active');
                }
            }

            // Editor tab
            var editorTab = DOM.add(ul, 'li', {}, '<a href="#wf-editor-wysiwyg">' + ed.getLang('tab_wysiwyg', 'Editor') + '</a>');

            if (activeTab === 'wf-editor-wysiwyg') {
                DOM.addClass(editorTab, 'active');
            }

            // Add tab click events
            Event.add(ul, 'click', function(e) {
                e.preventDefault();

                var n = e.target;

                if (n.nodeName !== "A") {
                    return;
                }

                var p = n.parentNode;

                if (DOM.hasClass(p, 'active')) {
                    return;
                }

                DOM.removeClass(DOM.select('li', ul), 'active');
                DOM.addClass(p, 'active');

                // get the action from tab href
                var action = n.href.substring(n.href.indexOf('#') + 1);

                // store current tab in a cookie
                sessionStorage.setItem('wf-editor-tabs', action);

                self._toggleTab(ed, action);
            });
        },

        _wrapText: function(el, s) {

            if (s) {
                el.setAttribute("wrap", "soft");
            } else {
                el.removeAttribute("wrap");
            }
        },

        /**
         * Set the editor content
         * @param {String} id The editor id
         * @param {String} html The html content to set
         */
        setContent: function(id, html) {
            var ed = this._getEditor(id);

            if (ed) {
                ed.setContent(html);
            } else {
                document.getElementById(id).value = html;
            }
        },
        /**
         * Get the editor content
         * @param {String} id The editor id
         */
        getContent: function(id) {
            var ed = this._getEditor(id);

            // pass content to textarea and return
            if (ed) {
                return ed.save();
            }

            // return textarea content
            return document.getElementById(id).value;
        },
        /**
         * Insert content into the editor. This function is provided for editor-xtd buttons and includes methods for inserting into textareas
         * @param {String} el The editor id
         * @param {String} v The text to insert
         */
        insert: function(el, v) {
            // get an editor object
            var ed = this._getEditor(el);

            // insert into textarea if editor not loaded or is hidden
            if (!ed) {
                if (typeof el === "string") {
                    el = document.getElementById(el);
                }

                if (el && !DOM.isHidden(el)) {
                    this.insertIntoTextarea(el, v);
                }

                return true;
            }

            // editor found, insert
            if (ed) {
                if (ed.id === el) {
                    if (ed.lastSelectionBookmark) {
                        ed.selection.moveToBookmark(ed.lastSelectionBookmark);
                    }

                    ed.execCommand('mceInsertContent', false, v);
                    return true;
                }
                ed.insertContent(v);
                return true;
            }

            return false;
        },
        insertIntoTextarea: function(el, v) {
            // IE
            if (document.selection) {
                el.focus();
                var s = document.selection.createRange();
                s.text = v;
                // Mozilla / Netscape
            } else {
                if (el.selectionStart || el.selectionStart == '0') {
                    var startPos = el.selectionStart;
                    var endPos = el.selectionEnd;
                    el.value = el.value.substring(0, startPos) + v + el.value.substring(endPos, el.value.length);
                    // Other
                } else {
                    el.value += v;
                }
            }
        },
        convertURL: function(url, elm, save, name) {
            var ed = tinymce.EditorManager.activeEditor,
                s = tinymce.settings,
                base = s.document_base_url;

            if (!url) {
                return url;
            }

            // Don't convert link href since thats the CSS files that gets loaded into the editor also skip local file URLs
            if (!s.convert_urls || (elm && elm.nodeName === 'LINK') || url.indexOf('file:') === 0) {
                return url;
            }

            if (url === base || url === base.substring(0, base.length - 1) || url.charAt(0) === '/') {
                return url;
            }

            // Convert to relative
            if (s.relative_urls) {
                return ed.documentBaseURI.toRelative(url);
            }

            // Convert to absolute
            url = ed.documentBaseURI.toAbsolute(url, s.remove_script_host);

            if (s.protocol_relative) {
                url = url.replace(/(http|https|ftp|ftps):\/\//, '//');
            }

            return url;
        },
        indent: function(h) {
            // simple indentation
            h = h.replace(/\n+/g, '\n');

            return tinymce.trim(h);
        }
    };
    window.WFEditor = WFEditor;
}());