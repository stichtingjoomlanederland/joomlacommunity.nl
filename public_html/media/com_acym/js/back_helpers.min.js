"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var acym_helperFilter = {
  setFieldValue: function setFieldValue($field, value) {
    if ($field.hasClass('acym_select2_ajax')) {
      var ctrl = $field.attr('data-ctrl');
      if (!ctrl) ctrl = 'dynamics';
      var task = $field.attr('data-task');
      if (!task) task = 'trigger';
      var url = ACYM_AJAX_URL + '&ctrl=' + ctrl + '&task=' + task + '&id=' + encodeURIComponent(value);
      var dataParams = $field.attr('data-params');
      var decodedParams = acym_helper.parseJson(dataParams);
      url += '&' + jQuery.param(decodedParams);
      jQuery.get(url, function (response) {
        response = acym_helper.parseJson(response);

        if (Array.isArray(response)) {
          response.map(function (option, index) {
            var newOption = new Option(option.text, option.value, false, true);
            $field.append(newOption).trigger('change');
          });
        } else {
          var newOption = new Option(response.text, response.value, true, true);
          $field.append(newOption).trigger('change');
        }
      });
    } else if (!$field.is(':checkbox') && $field.attr('data-switch') === undefined) {
      $field.val(value);
    } else if ($field.is(':checkbox') && value == 1) {
      $field.prop('checked', true);
    } else if ($field.attr('data-switch') !== undefined && $field.val() != value) {
      $field.closest('.medium-3').find('.cell.switch-label').click();
    }

    if ($field.attr('data-rs') !== undefined && value !== '') {
      if (value.indexOf(']') !== -1) {
        jQuery('input[data-open="' + $field.attr('data-rs') + '"]').val(value);
      } else {
        jQuery('input[data-open="' + $field.attr('data-rs') + '"]').val(moment.unix(value).format('DD MMM YYYY HH:mm'));
      }
    }
  }
};
var acym_helperHeader = {
  setVersionButton: function setVersionButton() {
    var $checkVersionButton = jQuery('#checkVersionButton');
    $checkVersionButton.on('click', function () {
      var $checkVersionArea = jQuery('#checkVersionArea');
      $checkVersionArea.html('<i class="acymicon-circle-o-notch acymicon-spin"></i>');
      var ajaxUrl = ACYM_AJAX_URL + '&ctrl=update&task=checkForNewVersion';
      jQuery.get(ajaxUrl, function (response) {
        response = acym_helper.parseJson(response);
        $checkVersionArea.html(response.content);
        jQuery('#acym__check__version__last__check').html(response.lastcheck);
      });
    });

    if (1 === $checkVersionButton.data('check')) {
      $checkVersionButton.click();
    }
  }
};
var acym_helperBack = {
  config_get: function config_get(field) {
    var ajaxUrl = ACYM_AJAX_URL + '&ctrl=configuration&task=getAjax&field=' + field;
    return jQuery.ajax({
      type: 'GET',
      url: ajaxUrl,
      dataType: 'json'
    });
  },
  setDoNotRemindMe: function setDoNotRemindMe() {
    jQuery('#acym__reviews__footer__link').on('click', function () {
      var ajaxUrl = ACYM_TOGGLE_URL + '&task=setDoNotRemindMe&value=' + encodeURIComponent(jQuery(this).attr('title'));
      jQuery.get(ajaxUrl, function (response) {
        response = acym_helper.parseJson(response);

        if ('' === response.error) {
          jQuery('#acym__reviews__footer').html(response.message);
        } else {
          console.log(response.error);
        }
      });
    });
    jQuery('.acym__do__not__remindme').on('click', function () {
      var identifier = jQuery(this).attr('title');
      jQuery('[data-news="' + identifier + '"]').remove();
      var ajaxUrl = ACYM_TOGGLE_URL + '&task=setDoNotRemindMe&value=' + encodeURIComponent(identifier);
      jQuery.get(ajaxUrl, function (response) {
        response = acym_helper.parseJson(response);

        if ('' !== response.error) {
          console.log(response.error);
        } else {
          location.reload();
        }
      });
    });
    jQuery('#acym__multilingual__reminder').on('click', function () {
      localStorage.setItem('acyconfiguration', 'languages');
    });
  }
};
var acym_helperJoomla = {
  setWidthJoomlaContent: function setWidthJoomlaContent() {
    var $leftMenu = jQuery('#acym__joomla__left-menu');
    if (!$leftMenu) return;
    var menuWidth = $leftMenu.width();

    if (jQuery(window).width() < 640) {
      menuWidth = 0;
      $leftMenu.css({
        'display': 'none'
      });
    } else {
      $leftMenu.css({
        'display': 'block'
      });
    }

    jQuery('#acym_content, .acym_no_foundation').css({
      'width': 'calc(100% - ' + menuWidth + 'px)',
      'margin-left': menuWidth + 'px'
    });
    jQuery('#system-message-container').css({
      'margin-left': menuWidth + 15 + 'px'
    });
  },
  setJoomlaLeftMenu: function setJoomlaLeftMenu() {
    var $leftMenu = jQuery('#acym__joomla__left-menu');
    var $buttonToggleLeftMenu = jQuery('#acym__joomla__left-menu--toggle');
    var $textLeftMenu = jQuery('#acym__joomla__left-menu a span');
    var $iTagforCollapse = jQuery('#acym__joomla__left-menu--toggle i');
    jQuery('.btn-subhead').hide();

    if ($buttonToggleLeftMenu.css('display') != 'none') {
      if ($leftMenu.hasClass('collapsed')) {
        $textLeftMenu.hide();
        $leftMenu.css({
          'width': '55px'
        });
        $iTagforCollapse.removeClass('acymicon-keyboard_arrow_left').addClass('acymicon-keyboard_arrow_right');
      } else {
        $textLeftMenu.show();
        $leftMenu.css({
          'width': '260px'
        });
        $iTagforCollapse.removeClass('acymicon-keyboard_arrow_right').addClass('acymicon-keyboard_arrow_left');
      }

      acym_helperJoomla.setWidthJoomlaContent();
      $buttonToggleLeftMenu.off('click').on('click', function () {
        if ($leftMenu.hasClass('collapsed')) {
          $leftMenu.removeClass('collapsed');
          $textLeftMenu.show();
          $leftMenu.css({
            'width': '260px'
          });
          $iTagforCollapse.removeClass('acymicon-keyboard_arrow_right').addClass('acymicon-keyboard_arrow_left');
          acym_helper.setCookie('menuJoomla', '', 365);
        } else {
          $leftMenu.addClass('collapsed');
          $textLeftMenu.hide();
          $leftMenu.css({
            'width': '55px'
          });
          $iTagforCollapse.removeClass('acymicon-keyboard_arrow_left').addClass('acymicon-keyboard_arrow_right');
          acym_helper.setCookie('menuJoomla', 'collapsed', 365);
        }

        acym_helperJoomla.setWidthJoomlaContent();
      });
    }

    jQuery('.btn-navbar').off('click').on('click', function () {
      $leftMenu.hide();
    });
    jQuery('#acym__joomla__left-menu--show').off('click').on('click', function () {
      !jQuery('.btn-navbar').hasClass('collapsed') ? '.nav-collapse'.css('height', '0px').removeClass('in') & jQuery('.btn-navbar').removeClass('collapsed') : true;
      $leftMenu.toggle();
    });
    jQuery(window).on('resize', function () {
      if (window.innerWidth < 950 && !$leftMenu.hasClass('collapsed')) $buttonToggleLeftMenu.click();
      acym_helperJoomla.setWidthJoomlaContent();
    });
  }
};
var acym_helperMailer = {
  setTestCredentialsSendingMethods: function setTestCredentialsSendingMethods() {
    jQuery('.acym__configuration__sending__method-test').off('click').on('click', function () {
      var sendingMethod = this.getAttribute('sending-method-id');
      if (sendingMethod === undefined) return false;
      var $icon = jQuery(this).closest('.acym__sending__methods__credentials__test').find('.acym__configuration__sending__method-icon');
      var $message = jQuery(this).closest('.acym__sending__methods__credentials__test').find('.acym__configuration__sending__method-test__message');
      $icon.removeClass('acym__color__red acym__color__green').addClass('acymicon-circle-o-notch acymicon-spin');
      $message.html('');
      var data = {
        ctrl: 'configuration',
        task: 'testCredentialsSendingMethod',
        sendingMethod: this.getAttribute('sending-method-id')
      };
      var credentialsField = jQuery("[name^=\"config[".concat(sendingMethod, "\"]"));

      for (var i = 0; i < credentialsField.length; i++) {
        var field = credentialsField[i];

        if (field.getAttribute('type') == 'radio' && field.checked) {
          data[field.getAttribute('name')] = field.value;
        } else if (field.getAttribute('type') != 'radio') {
          data[field.getAttribute('name')] = field.value;
        }
      }

      acym_helper.post(ACYM_AJAX_URL, data).then(function (response) {
        var classes;

        if (response.error) {
          classes = 'acymicon-times-circle acym__color__red';
        } else {
          classes = 'acymicon-check-circle acym__color__green';
        }

        $icon.removeClass('acymicon-circle-o-notch acymicon-spin');
        $icon.addClass(classes);
        $message.html(response.message);
      });
    });
  },
  setButtonCopyFromPlugin: function setButtonCopyFromPlugin() {
    jQuery('.acym__configuration__copy__mail__settings').off('click').on('click', function () {
      var $icon = jQuery(this).closest('.acym__sending__methods__copy__data').find('.acym__configuration__sending__method-icon');
      $icon.addClass('acymicon-circle-o-notch acymicon-spin');
      var data = {
        plugin: jQuery(this).attr('acym-data-plugin'),
        method: jQuery(this).attr('acym-data-method')
      };
      var ajaxUrl = ACYM_AJAX_URL + '&ctrl=configuration&task=copySettingsSendingMethod';
      acym_helper.get(ajaxUrl, data).then(function (response) {
        if (response.error) {
          acym_helperNotification.addNotification(response.message, 'error');
          return false;
        }

        for (var _i = 0, _Object$entries = Object.entries(response.data); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              name = _Object$entries$_i[0],
              value = _Object$entries$_i[1];

          var $input = jQuery("[name=\"config[".concat(name, "]\"]"));
          if ($input.length === 0) continue;

          if ($input.attr('data-switch') !== undefined && $input.val() != value) {
            $input.closest('.switch').find('.switch-label').trigger('click');
          } else if ($input.attr('type') === 'radio') {
            $input = jQuery("[name=\"config[".concat(name, "]\"][value=\"").concat(value.toLowerCase(), "\"]"));
            if ($input.length > 0) $input.trigger('click');
          } else {
            $input.val(value).trigger('change');
          }
        }
      }).always(function (response) {
        $icon.removeClass('acymicon-circle-o-notch acymicon-spin');
      });
    });
  }
};
var acym_helperNotification = {
  setNotificationCenter: function setNotificationCenter() {
    acym_helperNotification.removeNotifications();
    var $button = jQuery('.acym__header__notification');

    if ($button.find('i').hasClass('acymicon-check-circle')) {
      setTimeout(function () {
        $button.find('> i').attr('class', 'acymicon-bell-o');
        $button.find('.acym__tooltip__text').remove();
        $button.removeAttr('data-acym-tooltip').removeAttr('data-acym-tooltip-position').removeClass('acym__header__notification__button__success acym__header__notification__pulse');
      }, 8000);
    }

    $button.off('click').on('click', function () {
      var $notifButton = jQuery(this);
      var $notificationCenter = jQuery('.acym__header__notification__center');
      var notifButtonOffset = $notifButton.offset();
      var left = notifButtonOffset.left - $notificationCenter.width() + $notifButton.width() + 'px';
      var top = notifButtonOffset.top + $notifButton.height() + 10 + 'px';
      $notificationCenter.css({
        'top': top,
        'left': left
      }).addClass('acym__header__notification__center__visible');
      var ajaxUrl = ACYM_AJAX_URL + '&ctrl=configuration&task=markNotificationRead';
      jQuery.get(ajaxUrl, function (res) {
        res = acym_helper.parseJson(res);

        if (undefined === res.error) {
          jQuery('.acym__header__notification').removeClass('acym__header__notification__pulse acym__header__notification__button__success acym__header__notification__button__info acym__header__notification__button__warning acym__header__notification__button__error').find('> i').attr('class', 'acymicon-bell-o');
        } else {
          console.log(res.error);
        }
      });
      $button.off('click').on('click', function (e) {
        if (jQuery(e.target).hasClass('acym__header__notification__center__visible') || jQuery(e.target).closest('.acym__header__notification__center__visible').length > 0) {
          return true;
        }

        acym_helperNotification.removeNotificationsCenter();
      });
      setTimeout(function () {
        jQuery(window).off('click').on('click', function (e) {
          if (jQuery(e.target).hasClass('acym__header__notification__center__visible') || jQuery(e.target).closest('.acym__header__notification__center__visible').length > 0) {
            return true;
          }

          acym_helperNotification.removeNotificationsCenter();
        });
      }, 100);
    });
    jQuery('.acym__message__close').off('click').on('click', function () {
      var $closeButton = jQuery(this);
      var id = $closeButton.attr('data-id');

      if (id !== undefined && id != 0) {
        var ajaxUrl = ACYM_AJAX_URL + '&ctrl=configuration&task=markNotificationRead&id=' + id;
        jQuery.get(ajaxUrl, function (res) {
          res = acym_helper.parseJson(res);

          if (undefined === res.error) {
            $closeButton.closest('.acym__message').remove();
          } else {
            console.log(res.error);
          }
        });
      } else {
        $closeButton.closest('.acym__message').remove();
      }
    });
  },
  removeNotifications: function removeNotifications() {
    jQuery('.acym__header__notification__one__delete, .acym__header__notification__toolbox__remove').off('click').on('click', function () {
      var id = jQuery(this).hasClass('acym__header__notification__toolbox__remove') ? 'all' : jQuery(this).attr('data-id');
      var ajaxUrl = ACYM_AJAX_URL + '&ctrl=configuration&task=removeNotification&id=' + id;
      jQuery.get(ajaxUrl, function (res) {
        res = acym_helper.parseJson(res);

        if (undefined === res.error) {
          jQuery('.acym__header__notification__center').html(res.data);
          jQuery('.acym__header__notification').find('> i').attr('class', 'acymicon-bell-o');
          acym_helperNotification.removeNotifications();
        } else {
          console.log(res.error);
        }
      });
    });
  },
  removeNotificationsCenter: function removeNotificationsCenter() {
    jQuery('.acym__header__notification__center').removeClass('acym__header__notification__center__visible');
    jQuery(window).off('click');
    acym_helperNotification.setNotificationCenter();
  },
  addNotification: function addNotification(message, type, clear) {
    if (clear === undefined) clear = false;

    if (clear) {
      jQuery('.acym__message').remove();
    }

    if (type === undefined || jQuery.inArray(type, ['success', 'warning', 'error']) == -1) {
      type = 'info';
    }

    var headerNotif = acym_helperNotification.addHeaderNotification(message, type);
    jQuery('#acym_header').after(headerNotif);
    var ajaxUrl = ACYM_AJAX_URL + '&ctrl=configuration&task=addNotification&message=' + message + '&level=' + type;
    jQuery.get(ajaxUrl, function (res) {
      res = acym_helper.parseJson(res);

      if (res.error === undefined) {
        jQuery('.acym__header__notification').replaceWith(res.data);
        acym_helperNotification.setNotificationCenter();
      } else {
        console.log(res.error);
      }
    });
  },
  addHeaderNotification: function addHeaderNotification(message, type) {
    var structure = '<div class="acym__message grid-x acym__message__' + type + '">' + '<div class="cell auto">' + '<p>' + message + '</p>' + '</div>' + '<i data-id="0" class="cell shrink acym__message__close acymicon-remove"></i>' + '</div>';
    return structure;
  }
};
var acym_helperRadio = {
  setRadioIconsGlobal: function setRadioIconsGlobal() {
    jQuery('i.acym_radio_unchecked').on('click', function () {
      var $radio = jQuery('[for="' + jQuery(this).attr('data-radio') + '"]');
      $radio.click();
    });
    jQuery('.acym_radio_group > input[type="radio"]').off('change').on('change', function () {
      var radioName = jQuery(this).attr('name');
      var checked = jQuery('input[name="' + radioName + '"]:checked').val(); // We do it separated in two loops because we need to hide the related elements when unselected before showing the selected elements with acym-data-related
      // Some elements may be related to several options like in the config => queue process options

      var $radioOptions = jQuery('input[name="' + radioName + '"]');
      $radioOptions.each(function () {
        var radioId = jQuery(this).attr('id');
        var relatedElementsClass = jQuery(this).attr('acym-data-related');

        if (jQuery(this).val() !== checked) {
          jQuery('i[data-radio="' + radioId + '"].acym_radio_unchecked').show();
          jQuery('i[data-radio="' + radioId + '"].acym_radio_checked').hide();

          if (!acym_helper.empty(relatedElementsClass)) {
            jQuery('.' + relatedElementsClass).hide();
          }
        }
      });
      $radioOptions.each(function () {
        var radioId = jQuery(this).attr('id');
        var relatedElementsClass = jQuery(this).attr('acym-data-related');

        if (jQuery(this).val() === checked) {
          jQuery('i[data-radio="' + radioId + '"].acym_radio_unchecked').hide();
          jQuery('i[data-radio="' + radioId + '"].acym_radio_checked').show();

          if (!acym_helper.empty(relatedElementsClass)) {
            jQuery('.' + relatedElementsClass).show();
          }
        }
      });
    }).change();
  }
};
var acym_helperSegment = {
  filterRebuilt: true,
  blocksRebuilt: true,
  ajaxCalls: {},
  globalAjaxCall: '',
  reloadCounters: function reloadCounters(element) {
    if (!acym_helperSegment.filterRebuilt) return;
    var and = jQuery(element).closest('.acym__segments__inserted__filter').attr('data-and');
    var or = jQuery(element).closest('[data-filter-number]').attr('data-filter-number');
    var ajaxUrl = ACYM_AJAX_URL + '&page=acymailing_segments&ctrl=segments&task=countResults&and=' + and + '&or=' + or;
    if (undefined !== this.ajaxCalls[and]) this.ajaxCalls[and].abort();
    jQuery('#results_' + and).find('.acym__segments__edit__filter-results').html('<i class="acymicon-circle-o-notch acymicon-spin"></i>');
    this.ajaxCalls[and] = jQuery.post(ajaxUrl, jQuery(element).closest('#acym_form').serialize() + '&page=acymailing_segments&ctrl=segments&task=countResults&and=' + and + '&or=' + or).done(function (result) {
      result = acym_helper.parseJson(result);
      jQuery('#results_' + and).find('.acym__segments__edit__filter-results').html(result.message);
    }).fail(function () {
      jQuery('#results_' + and).find('.acym__segments__edit__filter-results').html(ACYM_JS_TXT.ACYM_ERROR);
    });
    this.reloadGlobalCounter();
  },
  reloadGlobalCounter: function reloadGlobalCounter() {
    if (!acym_helperSegment.blocksRebuilt) return;
    var $counterInput = '';

    if (jQuery('#acym__campaigns__segment').length > 0) {
      $counterInput = jQuery('#acym__campaigns__segment__edit-user-count');
    } else {
      var $noUserMessage = jQuery('.acym__segments__edit__filters__no-users');
      $counterInput = jQuery('.acym__segments__edit__filters__total');

      if (jQuery('[name^=acym_action]').length === 0) {
        $noUserMessage.show();
        $counterInput.hide();
        return;
      }

      $noUserMessage.hide();
      $counterInput.show();
    }

    if (this.globalAjaxCall !== '') {
      this.globalAjaxCall.abort();
      this.globalAjaxCall = '';
    }

    var groupFilter = jQuery('.acym__segments__group__filter');
    var ajaxUrlTotal = ACYM_AJAX_URL + '&page=acymailing_segments&ctrl=segments&task=countResultsTotal';
    $counterInput.html('<i class="acymicon-circle-o-notch acymicon-spin"></i>');
    this.globalAjaxCall = jQuery.post(ajaxUrlTotal, groupFilter.closest('#acym_form').serialize() + '&page=acymailing_segments&ctrl=segments&task=countResultsTotal').done(function (result) {
      result = acym_helper.parseJson(result);
      $counterInput.html(result.count);
    }).fail(function () {
      $counterInput.html(ACYM_JS_TXT.ACYM_ERROR);
    });
  },
  refreshFilterProcess: function refreshFilterProcess() {
    this.setSelectFilters('classic');
    this.setAddFilter();
    this.setDeleteFilter();
    acym_helperDatePicker.setDatePickerGlobal();
    acym_helperDatePicker.setRSDateChoice();
    acym_helperSelect2.setAjaxSelect2();
    this.setAddFilterOr();
  },
  setSelectFilters: function setSelectFilters(type) {
    var inCampaignStep = jQuery('#acym__campaigns__segment').length > 0;
    var $options = jQuery('#acym__segments__edit__info__options');
    if (!$options.length) return;
    var filters = JSON.parse($options.val());
    jQuery('.acym__segments__select__' + type + '__filter').off('change').on('change', function () {
      if (inCampaignStep) {
        jQuery('[name="segment_selected"]').val('');
      }

      var $inputAnd = jQuery('#acym__segments__filters__count__and');
      var deleteFilter = '';

      if (parseInt($inputAnd.val()) !== 0) {
        deleteFilter = "<span class=\"cell acym_vcenter acym__segments__delete__one__filter\"><i class=\"acymicon-delete\"></i>".concat(ACYM_JS_TXT.ACYM_DELETE_THIS_FILTER, "</span>");
      }

      $inputAnd.val(parseInt($inputAnd.val()) + 1);
      var seeUsersFilter = acym_helperSegment.getSeeUserModalButton(jQuery(this), $inputAnd.val());
      jQuery(this).parent().parent().find('.acym__segments__inserted__filter').remove();
      var html = filters[jQuery(this).val()].replace(/__numor__/g, jQuery(this).closest('.acym__segments__group__filter').attr('data-filter-number'));
      html = html.replace(/__numand__/g, $inputAnd.val());
      var classOptions = inCampaignStep ? 'medium-9' : 'medium-6';
      jQuery(this).parent().after('<div data-and="' + $inputAnd.val() + '" class="cell grid-x grid-margin-x grid-margin-y acym__segments__inserted__filter margin-top-1 margin-left-2 acym_vcenter"><div class="cell grid-x ' + classOptions + ' grid-margin-x grid-margin-y">' + html + '</div>' + '<span class="countresults margin-bottom-1 cell auto grid-x" id="results_' + $inputAnd.val() + '"><span class="acym__segments__edit__filter-results cell"></span>' + deleteFilter + seeUsersFilter + '</span>' + '</div>');
      acym_helperSelect2.setSelect2();
      acym_helperDatePicker.setDatePickerGlobal();
      acym_helperTooltip.setTooltip();
      jQuery(document).foundation();
      jQuery(document).trigger('acym__modal__users__summary__ready');
      jQuery('.switch-label').off('click').on('click', function () {
        var input = jQuery('input[data-switch="' + jQuery(this).attr('for') + '"]');
        input.attr('value', 1 - input.attr('value'));
      });
      var $operatorDropdown = jQuery(this).closest('.acym__segments__one__filter').find('.acym__automation__filters__operator__dropdown');
      var $fieldsDropdown = jQuery(this).closest('.acym__segments__one__filter').find('.acym__automation__filters__fields__dropdown');
      $operatorDropdown.on('change', function () {
        $fieldsDropdown.trigger('change');
      });
      $fieldsDropdown.on('change', function () {
        var $parent = jQuery(this).closest('.acym__segments__inserted__filter');
        var $select = $parent.find('[data-filter-field="' + jQuery(this).val() + '"]');
        var $selects = $parent.find('.acym__automation__filters__fields__select');
        var $defaultInput = $parent.find('.acym__automation__filter__regular-field');

        if ($select.length > 0 && ($operatorDropdown.val() === '=' || $operatorDropdown.val() === '!=')) {
          $defaultInput.attr('name', $defaultInput.attr('name').replace('acym_action', '')).hide();
          $selects.each(function (index) {
            jQuery(this).attr('name', jQuery(this).attr('name').replace('acym_action', ''));
            jQuery(this).closest('.acym__automation__one-field').hide();
          });
          if ($select.attr('name').indexOf('acym_action') === -1) $select.attr('name', 'acym_action' + $select.attr('name'));
          $select.closest('.acym__automation__one-field').show();
        } else {
          if ($defaultInput.attr('name').indexOf('acym_action') === -1) $defaultInput.attr('name', 'acym_action' + $defaultInput.attr('name'));

          if ($selects.length > 0) {
            $selects.each(function () {
              jQuery(this).attr('name', jQuery(this).attr('name').replace('acym_action', ''));
              jQuery(this).closest('.acym__automation__one-field').hide();
            });
          }

          $defaultInput.show();
        }
      }).trigger('change');
      jQuery(this).closest('.acym__segments__one__filter.acym__segments__one__filter__classic').find('.acym__segments__inserted__filter input, .acym__segments__inserted__filter select').on('change', function () {
        acym_helperSegment.reloadCounters(this);
      });

      if (jQuery(this).val() == 0) {
        acym_helperSegment.reloadGlobalCounter(jQuery(this).closest('.acym__segments__group__filter'));
      } else {
        acym_helperSegment.reloadCounters(jQuery(this).closest('.acym__segments__one__filter.acym__segments__one__filter__classic').find('.acym__segments__inserted__filter input, .acym__segments__inserted__filter select'));
      }

      jQuery(document).foundation();
      jQuery('.reveal-overlay').appendTo('#acym_form');
      acym_helperSegment.refreshFilterProcess();
    });
  },
  setAddFilter: function setAddFilter() {
    jQuery('.acym__segments__add-filter').off('click').on('click', function () {
      var nbANDs = jQuery(this).closest('.acym__segments__group__filter').find('.acym__segments__one__filter').length;

      if (nbANDs === 0) {
        var $clone = jQuery('#acym__segments__and__example').clone().removeAttr('id');
        $clone.find('.acym__automation__and').remove();
        jQuery(this).parent().before($clone.show());
      } else {
        jQuery(this).parent().before(jQuery('#acym__segments__and__example').clone().removeAttr('id').show());
      }

      var $newElement = jQuery(this).parent().prev();
      $newElement.addClass('acym__segments__one__filter__' + jQuery(this).attr('data-filter-type'));
      $newElement.find('.acym__segments__and__example__' + jQuery(this).attr('data-filter-type') + '__select').show().find('select').addClass('acym__select').select2({
        theme: 'foundation',
        width: '100%'
      });
      acym_helperSegment.refreshFilterProcess();
    });
  },
  setDeleteFilter: function setDeleteFilter() {
    jQuery('.acym__segments__delete__one__filter').off('click').on('click', function () {
      jQuery(this).closest('.acym__segments__one__filter').remove();
      acym_helperSegment.reloadGlobalCounter();
    });
    jQuery('.acym__segments__delete__one__or').off('click').on('click', function () {
      jQuery(this).closest('.acym__segments__or__container').remove();
      acym_helperSegment.reloadGlobalCounter();
    });
  },
  rebuildFilters: function rebuildFilters() {
    var $filterElement = jQuery('#acym__segments__filters');
    if ($filterElement.val() === '') return;
    var filters = JSON.parse($filterElement.val());
    var or = 0; // Foreach OR block

    var lastOrBlock = parseInt(Object.keys(filters).slice(-1)[0]);
    acym_helperSegment.blocksRebuilt = false;
    jQuery.each(filters, function (numOR, oneORBlock) {
      // Create a new OR block if needed
      if (or !== 0) jQuery('.acym__automation__filters__or').click();
      var and = 0;
      var lastFilterInOrBlock = Object.keys(oneORBlock).slice(-1)[0];
      jQuery.each(oneORBlock, function (numAND, oneFilter) {
        // Create a new AND block if needed
        if (and !== 0) {
          jQuery('.acym__segments__group__filter[data-filter-number="' + or + '"]').find('.acym__segments__add-filter[data-filter-type]').click();
        }

        acym_helperSegment.filterRebuilt = false;
        jQuery.each(oneFilter, function (filterName, filterOptions) {
          // Select the filter type in the correct dropdown
          var $filterSelect = jQuery('.acym__segments__group__filter[data-filter-number="' + or + '"]').find('.acym__segments__select__classic__filter').last();
          $filterSelect.val(filterName);
          $filterSelect.trigger('change');
          var keys = Object.keys(filterOptions);
          jQuery.each(keys, function (key) {
            var optionName = keys[key];
            var optionValue = filterOptions[keys[key]]; // Set the option values

            var $optionField = jQuery('[name="acym_action[filters][' + or + '][' + jQuery('#acym__segments__filters__count__and').val() + '][' + filterName + '][' + optionName + ']"]');
            acym_helperFilter.setFieldValue($optionField, optionValue);

            if (key === keys.length - 1) {
              acym_helperSegment.filterRebuilt = true;

              if (lastFilterInOrBlock === numAND && lastOrBlock === parseInt(numOR)) {
                acym_helperSegment.blocksRebuilt = true;
              }
            }

            $optionField.trigger('change');
          });
        });
        and++;
      });
      or++;
    });
    this.refreshFilterProcess();
  },
  setAddFilterOr: function setAddFilterOr() {
    jQuery('.acym__automation__filters__or').off('click').on('click', function () {
      var $inputOr = jQuery('#acym__automation__filters__count__or');
      $inputOr.val(parseInt($inputOr.val()) + 1);
      jQuery(this).before(jQuery('#acym__automation__or__example').html());
      var $newElement = jQuery(this).prev();
      $newElement.find('.acym__segments__group__filter').attr('data-filter-number', $inputOr.val());
      acym_helperSegment.refreshFilterProcess();
      $newElement.find('button[data-filter-type]').click();
      if ('classic' === jQuery(this).attr('data-filter-type')) acym_helperSegment.reloadGlobalCounter($newElement);
    });
  },
  getSeeUserModalButton: function getSeeUserModalButton($element, andValue) {
    var idModal = "acym__segments__see-users__".concat(andValue);
    var $seeUserModalButton = jQuery('#acym__segment__see-users__example').clone();
    var $seeUserModal = jQuery('#acym__segments__see-users').closest('.reveal-overlay').clone();
    $seeUserModalButton.find('[data-open="acym__segments__see-users"]').attr('data-open', idModal);
    $seeUserModal.find('#acym__segments__see-users').attr('id', idModal);
    var dataSeeUserModal = {
      ctrl: 'segments',
      task: 'usersSummary',
      and: andValue,
      or: $element.closest('[data-filter-number]').attr('data-filter-number')
    };
    $seeUserModal.find('[acym-data-query]').attr('acym-data-query', JSON.stringify(dataSeeUserModal));
    var seeUserModalHtml = $seeUserModalButton.html() + $seeUserModal[0].outerHTML;
    return "<span class=\"cell shrink acym__segments__see-users\">".concat(seeUserModalHtml, "</span>");
  }
};
var acym_helperSelect2 = {
  initJsSelect2: function initJsSelect2() {
    this.setSelect2();
    this.setAjaxSelect2();
    this.setSelect2Email();
    this.setSelect2ChooseTagsGlobal();
  },
  setSelect2: function setSelect2() {
    jQuery('.acym__select:not([acym-data-infinite])').select2({
      theme: 'foundation',
      width: '100%'
    });
    jQuery('.acym__select[acym-data-infinite]').select2({
      theme: 'foundation',
      width: '100%',
      minimumResultsForSearch: Infinity
    });
    jQuery('.intext_select').select2({
      theme: 'foundation',
      minimumResultsForSearch: Infinity
    });
  },
  setAjaxSelect2: function setAjaxSelect2() {
    jQuery('.acym_select2_ajax').each(function () {
      var $placeholder = jQuery(this).attr('data-placeholder');
      if (!$placeholder) $placeholder = '- - -';
      var ctrl = jQuery(this).attr('data-ctrl');
      if (!ctrl) ctrl = 'dynamics';
      var task = jQuery(this).attr('data-task');
      if (!task) task = 'trigger';
      var defaultOption = jQuery(this).attr('acym-data-default');
      var searchParams = {
        'ctrl': ctrl,
        'task': task
      };
      var dataParams = jQuery(this).attr('data-params');

      if (dataParams) {
        var decodedParams = JSON.parse(dataParams);
        Object.assign(searchParams, decodedParams);
      }

      var dataMin = jQuery(this).attr('data-min');
      if (!dataMin) dataMin = 3;
      jQuery(this).select2({
        theme: 'foundation',
        ajax: {
          url: ACYM_AJAX_URL,
          dataType: 'json',
          delay: 250,
          data: function data(params) {
            searchParams.search = params.term;
            return searchParams;
          },
          processResults: function processResults(data) {
            var options = [];

            if (undefined !== defaultOption && (searchParams.search === '' || undefined === searchParams.search)) {
              options.push({
                id: 0,
                text: defaultOption
              });
            }

            if (data) {
              jQuery.each(data, function (index, text) {
                options.push({
                  id: text[0],
                  text: text[1]
                });
              });
            }

            return {
              results: options
            };
          },
          cache: true
        },
        minimumInputLength: dataMin,
        width: '100%',
        allowClear: true,
        placeholder: $placeholder
      });
      var dataSelected = jQuery(this).attr('data-selected');

      if (dataSelected !== undefined) {
        var url = ACYM_AJAX_URL + '&ctrl=' + ctrl + '&task=' + task + '&id=' + encodeURIComponent(dataSelected);
        var $currentSelect2 = jQuery(this);

        if (undefined !== searchParams.plugin && undefined !== searchParams.trigger) {
          url += "&plugin=".concat(searchParams.plugin, "&trigger=").concat(searchParams.trigger);
        }

        jQuery.get(url, function (response) {
          response = acym_helper.parseJson(response);

          if (Array.isArray(response)) {
            response.map(function (option, index) {
              var newOption = new Option(option.text, option.value, false, true);
              $currentSelect2.append(newOption);
            });
          } else {
            var newOption = new Option(response.text, response.value, false, false);
            $currentSelect2.append(newOption);
          }
        });
      }
    });
  },
  setSelect2Email: function setSelect2Email() {
    var $emailsField = jQuery('.acym__multiselect__email');
    var searchParams = {
      'ctrl': 'campaigns',
      'task': 'searchTestReceivers'
    };
    $emailsField.select2({
      width: '100%',
      placeholder: $emailsField.attr('placeholder'),
      tags: true,
      theme: 'foundation',
      tokenSeparators: [' ', ',', ';'],
      createTag: function createTag(params) {
        var term = jQuery.trim(params.term);

        if (!acym_helper.emailValid(term)) {
          return null;
        }

        return {
          id: term,
          text: term
        };
      },
      ajax: {
        url: ACYM_AJAX_URL,
        dataType: 'json',
        delay: 250,
        data: function data(params) {
          searchParams.search = params.term;
          return searchParams;
        },
        processResults: function processResults(data) {
          var options = [];

          if (data) {
            jQuery.each(data, function (index, text) {
              var value = text[0];

              if ($emailsField.length > 1) {
                value = text[1];
              }

              options.push({
                id: value,
                text: text[1]
              });
            });
          }

          return {
            results: options
          };
        }
      },
      minimumInputLength: 3
    });
  },
  setSelect2ChooseTagsGlobal: function setSelect2ChooseTagsGlobal() {
    var $selectMultipleTags = jQuery('#acym__tags__field');
    var $placeholderSelect = $selectMultipleTags.attr('placeholder');
    $selectMultipleTags.select2({
      width: '100%',
      placeholder: $placeholderSelect,
      tags: true,
      theme: 'foundation',
      tokenSeparators: [' '],
      createTag: function createTag(params) {
        var term = jQuery.trim(params.term);

        if (term === '') {
          return null;
        }

        return {
          id: 'acy_new_tag_' + term,
          text: term,
          newTag: true
        };
      }
    });
  }
};
var acym_helperStats = {
  setLineChartOpenTimeWeek: function setLineChartOpenTimeWeek() {
    var dataOpenTime = document.getElementById('acym__stats__global__open-time__data');
    if (dataOpenTime === null) return;
    var data = document.getElementById('acym__stats__global__open-time__data').value;
    if (data === undefined) return;
    data = acym_helper.parseJson(data);
    var labels = [];
    var dataList = [];
    var labelsNotFormatted = {
      sunday: [],
      other: []
    };
    var dataListNotFormatted = {
      sunday: [],
      other: []
    };
    var days = {
      0: ACYM_JS_TXT.ACYM_SUNDAY,
      1: ACYM_JS_TXT.ACYM_MONDAY,
      2: ACYM_JS_TXT.ACYM_TUESDAY,
      3: ACYM_JS_TXT.ACYM_WEDNESDAY,
      4: ACYM_JS_TXT.ACYM_THURSDAY,
      5: ACYM_JS_TXT.ACYM_FRIDAY,
      6: ACYM_JS_TXT.ACYM_SATURDAY
    };
    var hours = {
      1: '3h',
      2: '6h',
      3: '9h',
      4: '12h',
      5: '15h',
      6: '18h',
      7: '21h'
    };
    data.map(function (dayData, indexDay) {
      var labelToFill = indexDay === 0 ? 'sunday' : 'other';
      dayData.map(function (hourData, indexHour) {
        if (indexHour === 0) {
          labelsNotFormatted[labelToFill].push(days[indexDay]);
        } else {
          labelsNotFormatted[labelToFill].push(hours[indexHour]);
        }

        dataListNotFormatted[labelToFill].push(hourData);
      });
    });
    labels = labelsNotFormatted.other.concat(labelsNotFormatted.sunday);
    dataList = dataListNotFormatted.other.concat(dataListNotFormatted.sunday);
    var chart = new Chart(document.getElementById('chartjs-0'), {
      'type': 'line',
      'data': {
        'labels': labels,
        'datasets': [{
          'label': ACYM_JS_TXT.ACYM_OPEN_PERCENTAGE,
          'data': dataList,
          'fill': false,
          'borderColor': 'rgb(0, 165, 255)',
          'lineTension': 0.1
        }]
      },
      options: {
        responsive: true,
        legend: {
          //We make custom legends
          display: false
        },
        maintainAspectRatio: false,
        tooltips: {
          //on hover the dot
          backgroundColor: '#fff',
          borderWidth: 2,
          borderColor: '#303e46',
          titleFontSize: 16,
          titleFontColor: '#303e46',
          bodyFontColor: '#303e46',
          bodyFontSize: 14,
          displayColors: false
        },
        scales: {
          yAxes: [{
            gridLines: {
              display: false
            },
            ticks: {
              //label on the axesY
              display: true,
              fontColor: '#0a0a0a'
            }
          }],
          xAxes: [{
            gridLines: {
              display: false
            },
            ticks: {
              //label on the axesX
              display: true,
              fontSize: 14,
              fontColor: '#0a0a0a'
            }
          }]
        }
      }
    });
  }
};