jQuery(document).ready(function ($) {

    Vue.component('acym-media', {
        name: 'acym-media',
        template: '<div class="cell shrink grid-x acym_vcenter"><div v-html="joomlaIframe"></div><button type="button" class="cell shrink button-secondary button margin-bottom-0 margin-right-1" @click="openMedia">{{ text }}</button><i @click="removeImage" class="cell shrink cursor-pointer acymicon-trash-o acym__color__red" v-if="value !== \'\'"></i></div>',
        props: {
            'value': String,
            'text': String
        },
        mounted: function () {
            this.initJoomlaModal();
        },
        data: () => {
            if (ACYM_CMS === 'wordpress') return {joomlaIframe: ''};

            let iframe = '<div id="acym__form__modal__joomla-image">';
            iframe += '<div id="acym__form__modal__joomla-image__bg" class="acym__form__modal__joomla-image--close"></div>';
            iframe += '<div id="acym__form__modal__joomla-image__ui" class="float-center cell">';

            let url = 'index.php?option=com_media&amp;asset=com_content&amp;author=acymailing&amp;tmpl=component';
            if (!ACYM_J40) {
                url += '&amp;view=images';
            }

            iframe += '<iframe id="acym__form__modal__joomla-image__ui__iframe" src="' + url + '" frameborder="0"></iframe>';

            if (ACYM_J40) {
                iframe += '<div class="cell grid-x align-right grid-margin-x">';
                iframe += '<button id="acym__form__modal__joomla-image__ui__iframe__actions__select" type="button" class="button button-secondary cell shrink margin-bottom-0">';
                iframe += ACYM_JS_TXT.ACYM_SELECT;
                iframe += '</button>';
                iframe += '<button id="acym__form__modal__joomla-image__ui__iframe__actions__cancel" type="button" class="button button-secondary cell shrink margin-bottom-0">';
                iframe += ACYM_JS_TXT.ACYM_CANCEL;
                iframe += '</button>';
                iframe += '</div>';
            }

            iframe += '</div></div>';

            return {joomlaIframe: iframe};
        },
        methods: {
            openMedia() {
                if (ACYM_CMS === 'wordpress') {
                    this.openMediaWordpress();
                } else {
                    this.openMediaJoomla();
                }
            },
            openMediaWordpress() {
                let file_frame;
                file_frame = wp.media.frames.file_frame = wp.media({
                    title: ACYM_JS_TXT.ACYM_SELECT_IMAGE_TO_UPLOAD,
                    button: {text: ACYM_JS_TXT.ACYM_USE_THIS_IMAGE},
                    multiple: false
                });
                file_frame.on('select', () => {
                    let attachment = file_frame.state().get('selection').first().toJSON();
                    this.$emit('change', attachment.url);
                });
                file_frame.open();
            },
            openMediaJoomla() {
                jQuery('#acym__form__modal__joomla-image').css('display', 'inherit');
            },
            initJoomlaModal() {
                let vueComp = this;
                let $modalUi = jQuery('#acym__form__modal__joomla-image__ui__iframe');
                let iframeHeight = '100%';
                if (ACYM_J40) {
                    iframeHeight = 'calc(100% - 50px)';
                }
                $modalUi.css('height', iframeHeight).css('width', '100%');
                $modalUi.contents().find('.chzn-container-single').attr('style', '').css('width', '150px');
                $modalUi.on('load', function () {
                    jQuery('.acym__form__modal__joomla-image--close').on('click', function () {
                        jQuery('#acym__form__modal__joomla-image').hide();
                    });
                    $modalUi.contents().find('.button-cancel').attr('onclick', '').off('click').on('click', function () {
                        jQuery('#acym__form__modal__joomla-image').hide();
                    });
                    $modalUi.contents().find('.pull-right .btn-success, .pull-right .btn-primary').attr('onclick', '').off('click').on('click', function () {
                        let inputUrlImg = $modalUi.contents().find('#f_url').val();
                        if (inputUrlImg.match('^' + ACYM_JOOMLA_MEDIA_FOLDER)) inputUrlImg = ACYM_JOOMLA_MEDIA_IMAGE + inputUrlImg;
                        vueComp.$emit('change', inputUrlImg);
                        jQuery('#acym__form__modal__joomla-image').hide();
                    });
                });

                // Joomla 4 select/cancel buttons
                jQuery('#acym__form__modal__joomla-image__ui__iframe__actions__cancel').off('click').on('click', function () {
                    jQuery('#acym__form__modal__joomla-image').hide();
                });

                jQuery('#acym__form__modal__joomla-image__ui__iframe__actions__select').off('click').on('click', function () {
                    // 1 - Get current folder
                    let folderPath = ACYM_ROOT_URI;
                    $modalUi.contents().find('.media-breadcrumb-item a').each(function () {
                        folderPath += jQuery(this).text().trim() + '/';
                    });

                    // 2 - Get selected image(s)
                    let imagesUrls = [];

                    // When selecting a images from the grid view
                    $modalUi.contents().find('.media-browser-grid .media-browser-item.selected .media-browser-image .media-browser-item-info').each(function () {
                        imagesUrls.push(folderPath + jQuery(this).text().trim());
                    });

                    // When selecting images from the list view instead of grid view
                    if (imagesUrls.length === 0) {
                        $modalUi.contents().find('.media-browser .media-browser-item.selected').each(function () {
                            if (!acym_helper.empty(jQuery(this).find('.size').text().trim())) {
                                imagesUrls.push(folderPath + jQuery(this).find('.name').text().trim());
                            }
                        });
                    }

                    // 3 - Take the first image selected
                    let inputUrlImg = '';

                    if(imagesUrls.length !== 0){
                        inputUrlImg = imagesUrls[0];
                    }

                    if (inputUrlImg.match('^' + ACYM_JOOMLA_MEDIA_FOLDER)) inputUrlImg = ACYM_JOOMLA_MEDIA_IMAGE + inputUrlImg;
                    vueComp.$emit('change', inputUrlImg);
                    jQuery('#acym__form__modal__joomla-image').hide();
                });
            },
            removeImage() {
                this.$emit('change', '');
            }
        }
    });
});

jQuery(document).ready(function ($) {
    if (undefined === $.fn.select2) return;

    $.fn.select2.defaults.set('theme', 'foundation');

    Vue.component('select2multiple', {
        name: 'select2multiple',
        template: `<div class="cell">
                    <select multiple :name="name">
                        <option v-if="allOptionExist" :value="'all'">{{ options.all }}</option>
                        <option v-if="allOptionExist" disabled>-----------------------------</option>
                        <option v-for="(option, key) in options" :value="key" v-if="key !== 'all'">{{ option }}</option>
                    </select>
                   </div>`,
        props: {
            'options': Object,
            'value': Array,
            'name': String
        },
        data: () => {
            return {
                oldSelected: [],
                allOptionExist: false
            };
        },
        mounted: function () {
            let vueComp = this;
            this.oldSelected = this.value;
            this.allOptionExist = Object.keys(this.options).indexOf('all') !== -1;

            setTimeout(() => {
                $('[name="' + this.name + '"]')
                    .select2({
                        theme: 'foundation',
                        width: '100%'
                    })
                    .val(this.value)
                    .trigger('change')
                    .on('change', function () {
                        // It allows to tell to the higher application that the value changed
                        let previousValues = vueComp.oldSelected;
                        if (previousValues === null) previousValues = [];
                        let selectedValues = $(this).val();
                        if (selectedValues === null) selectedValues = [];

                        if (Object.keys(vueComp.options).filter(option => option === 'all').length > 0 && !acym_helper.empty(selectedValues)) {
                            if (selectedValues.indexOf('all') !== -1) {
                                if (previousValues.indexOf('all') === -1) {
                                    $(this).val(['all']);
                                } else {
                                    let newValues = selectedValues.filter(page => page !== 'all');
                                    $(this).val(newValues === null ? [] : newValues);
                                }
                            }
                        }

                        let newValues = $(this).val();
                        if (newValues === null) newValues = [];
                        vueComp.oldSelected = newValues;
                        vueComp.$emit('input', newValues);
                    });
            }, 100);
        },
        watch: {
            options: function (options) {
                // update options
                $('[name="' + this.name + '"]').select2({data: options});
            }
        },
        destroyed: function () {
            $('[name="' + this.name + '"]').off().select2('destroy');
        }
    });

    Vue.component('select2', {
        name: 'select2',
        template: '<div class="cell"><select :name="name">' + '<option v-for="(option, key) in options" :value="key">{{ option }}</option>' + '</select></div>',
        props: [
            'options',
            'value',
            'name'
        ],
        mounted: function () {
            let vueComp = this;
            $('[name="' + this.name + '"]')
                // init select2
                .select2({
                    theme: 'foundation',
                    width: '100%'
                })
                .val(this.value)
                .trigger('change')
                // emit event on change.
                .on('change', function () {
                    //it allows to tells to the higher application that the value changed
                    vueComp.$emit('input', this.value);
                });
        },
        watch: {
            options: function (options) {
                // update options
                $('[name="' + this.name + '"]').select2({data: options});
            }
        },
        destroyed: function () {
            $('[name="' + this.name + '"]').off().select2('destroy');
        }
    });

    Vue.component('select2ajax', {
        name: 'select2ajax',
        template: '<div class="cell"><select :name="name">'
                  + '<option v-for="(option, key) in options" :value="option.id">{{ option.text }}</option>'
                  + '</select></div>',
        props: [
            'value',
            'name',
            'urlselected',
            'ctrl',
            'task'
        ],
        data: () => {
            return {
                options: []
            };
        },
        mounted: function () {
            let vueComp = this;
            $.get(ACYM_AJAX_URL + vueComp.urlselected + this.value, (data) => {
                data = acym_helper.parseJson(data);
                let $selectAjax = $('[name="' + this.name + '"]');
                if (!acym_helper.empty(data)) {
                    let newOption = new Option(data.title, data.id, false, false);
                    $selectAjax.append(newOption);
                }

                // init select2
                $selectAjax.select2({
                    ajax: {
                        url: ACYM_AJAX_URL,
                        dataType: 'json',
                        delay: 250,
                        data: function (params) {
                            return {
                                searchedterm: params.term,
                                ctrl: vueComp.ctrl,
                                task: vueComp.task
                            };
                        },
                        processResults: function (data) {
                            vueComp.options = [];
                            if (data) {
                                jQuery.each(data, function (index, text) {
                                    vueComp.options.push({
                                        id: text[0],
                                        text: text[1]
                                    });
                                });
                            }
                            return {
                                results: vueComp.options
                            };
                        }
                    },
                    theme: 'foundation',
                    width: '100%',
                    minimumInputLength: 3,
                    allowClear: true,
                    placeholder: '- - -'
                })
                           .val(this.value)
                    // emit event on change.
                           .on('change', function () {
                               //it allows to tells to the higher application that the value changed
                               vueComp.$emit('input', this.value);
                           });
            });
        },
        destroyed: function () {
            $('[name="' + this.name + '"]').off().select2('destroy');
        }
    });
});

jQuery(document).ready(function ($) {
    if (undefined === $.fn.select2) return;

    Vue.component('spectrum', {
        name: 'spectrum',
        template: '<div class="cell auto grid-x"><input @click="openSpectrum" type="text" class="cell medium-6 acym__forms__menu__options__input-color-disabled" readonly :value="value"><input type="text" :name="name"></div>',
        props: {
            'value': String,
            'name': String
        },
        mounted: function () {
            let vueComp = this;
            $('[name="' + this.name + '"]').spectrum({
                color: this.value,
                preferredFormat: 'hex',
                showButtons: false,
                showInput: true,
                change: function (color) {
                    vueComp.$emit('input', color.toHexString());
                }
            });
        },
        methods: {
            openSpectrum() {
                console.log($('[name="' + this.name + '"]').next());
                $('[name="' + this.name + '"]').next().click();
            }
        },
        destroyed: function () {
            $('[name="' + this.name + '"]').spectrum('destroy');
        }
    });
});
