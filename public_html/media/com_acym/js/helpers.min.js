"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var acym_helperCampaigns = {
  attachmentNb: 1,
  initCampaigns: function initCampaigns() {
    acym_helperCampaigns.setChooseConfirmReplaceTemplate();
    acym_helperCampaigns.initAttachmentCampaigns();
    acym_helperCampaigns.setStopScheduled();
    acym_helperCampaigns.setStopSending();
    acym_helperCampaigns.setDeactivateAutomatic();
    acym_helperCampaigns.setSummaryScroll();

    if (jQuery('#acym__wysid').length < 1) {
      acym_helperCampaigns.setSendSettingsButtons();
    }
  },
  setSummaryScroll: function setSummaryScroll() {
    var $workflow = jQuery('#workflow');
    var currentStepHref = $workflow.find('a').attr('href');

    if (undefined !== currentStepHref && (currentStepHref.indexOf('summary') || currentStepHref.indexOf('test'))) {
      jQuery(document).ready(function () {
        $workflow.scrollLeft($workflow.outerWidth());
      });
    }
  },
  setChooseConfirmReplaceTemplate: function setChooseConfirmReplaceTemplate() {
    var campaignId = jQuery('#acym__campaign__choose__campaign').val();
    jQuery('#acym__templates__choose__create__empty').off('click').on('click', function (e) {
      if (campaignId && 0 != campaignId && !confirm(ACYM_JS_TXT.ACYM_REPLACE_CONFIRM)) {
        e.preventDefault();
        return false;
      }
    });
    jQuery('.acym__templates__oneTpl').off('click').on('click', function (e) {
      if (!campaignId || 0 == campaignId || confirm(ACYM_JS_TXT.ACYM_REPLACE_CONFIRM)) {
        window.location.href = jQuery(this).find('.acym__templates__oneTpl__choose').val();
      }
    });
  },
  setAutoOpenEditor: function setAutoOpenEditor() {
    if (!jQuery('#acym__campaign__edit_email').length) return;

    if ('0' === jQuery('#acym__campaign__recipients__form__campaign').val()) {
      jQuery('#acym__wysid__edit__button').click();
    }
  },
  initAttachmentCampaigns: function initAttachmentCampaigns() {
    acym_helperCampaigns.setAddAttachmentButton();
    acym_helperCampaigns.setRemoveAttachment();
    acym_helperCampaigns.setDeleteAttachment();
  },
  setAddAttachmentButton: function setAddAttachmentButton() {
    jQuery('#acym__campaigns__attach__add').off('click').on('click', function () {
      if (acym_helperCampaigns.attachmentNb > 9) return;
      jQuery('#acym__campaigns__attach__' + acym_helperCampaigns.attachmentNb).css('display', '');
      acym_helperCampaigns.attachmentNb++;
    });
  },
  setRemoveAttachment: function setRemoveAttachment() {
    jQuery('.acym__campaigns__attach__remove').off('click').on('click', function (evt) {
      var idRemove = evt.currentTarget.getAttribute('data-id');
      jQuery('#attachments' + idRemove + 'selection').html('');
      jQuery('#attachments' + idRemove + 'suppr').css('display', 'none');
      jQuery('#attachments' + idRemove).val('');
    });
  },
  setDeleteAttachment: function setDeleteAttachment() {
    jQuery('.acym__campaigns__attach__delete').off('click').on('click', function (evt) {
      var allAttachment = jQuery('.acym__campaigns__attach__delete');
      var current = jQuery(this);
      var idRemove = '';
      var idDivToRemove = '';
      allAttachment.each(function (index) {
        if (jQuery(this).attr('data-id') == current.attr('data-id')) {
          idRemove = index;
          idDivToRemove = current.attr('data-id');
        }
      });
      var mailid = current.attr('data-mail');
      jQuery.get(ACYM_AJAX_URL + '&ctrl=campaigns&task=deleteAttach&id=' + idRemove + '&mail=' + mailid, function (response) {
        response = acym_helper.parseJson(response);

        if (undefined !== response.error) {
          acym_helperNotification.addNotification(response.error, 'error');
        } else {
          acym_helperNotification.addNotification(response.message, 'info');
          jQuery('#acym__campaigns__attach__del' + idDivToRemove).remove();
        }
      }).fail(function (e) {
        console.log(e);
      });
    });
  },
  setSendSettingsButtons: function setSendSettingsButtons() {
    jQuery('.acym__campaign__sendsettings__buttons-type').off('click').on('click', function () {
      if (jQuery(this).hasClass('disabled')) return true;
      jQuery('.acym__campaign__sendsettings__buttons-type').addClass('button-radio-unselected');
      jQuery(this).removeClass('button-radio-unselected');
      jQuery('.acym__campaign__sendsettings__params').hide();
      jQuery('[data-show="' + jQuery(this).attr('id') + '"]').show();
      jQuery('[name="sending_type"]').val(jQuery(this).attr('data-sending-type'));

      if (jQuery(this).attr('id') !== 'acym__campaign__sendsettings__scheduled') {
        jQuery('#acym__campaign__sendsettings__send-type-scheduled__date').removeAttr('required');
      } else {
        jQuery('#acym__campaign__sendsettings__send-type-scheduled__date').attr('required', 'required');
      }
    });
  },
  setStopScheduled: function setStopScheduled() {
    jQuery('.acym__campaign__listing__scheduled__stop').off('click').on('click', function () {
      var $form = jQuery('#acym_form');
      var $campaignId = jQuery(this).attr('data-campaignid');
      $form.append('<input type="hidden" name="stopScheduledCampaignId" value="' + $campaignId + '">');
      $form.find('[name="task"]').val('stopScheduled');
      $form.submit();
    });
  },
  setStopSending: function setStopSending() {
    jQuery('.acym__campaign__listing__sending__stop').off('click').on('click', function () {
      var $form = jQuery('#acym_form');
      var $campaignId = jQuery(this).attr('data-campaignid');
      $form.append('<input type="hidden" name="stopSendingCampaignId" value="' + $campaignId + '">');
      $form.find('[name="task"]').val('stopSending');
      $form.submit();
    });
  },
  setDeactivateAutomatic: function setDeactivateAutomatic() {
    jQuery('.acym__campaign__listing__automatic__deactivate').off('click').on('click', function () {
      var $form = jQuery('#acym_form');
      var $campaignId = jQuery(this).attr('data-campaignid');
      $form.append('<input type="hidden" name="id" value="' + $campaignId + '">');
      $form.find('[name="task"]').val('toggleActivateColumnCampaign');
      $form.submit();
    });
  },
  setSelectionCreateNewMail: function setSelectionCreateNewMail() {
    var allCards = jQuery('.acym__email__new__card:not(.acym__email__new__card__disabled)');
    allCards.off('click').on('click', function () {
      if (jQuery(this).hasClass('acym__email__new__card-selected')) return;
      allCards.removeClass('acym__email__new__card-selected');
      jQuery(this).addClass('acym__email__new__card-selected');

      if (jQuery(this).hasClass('acym__email__new__card-list') && jQuery(this).find('.acym__email__new__card__select').val() !== '' || !jQuery(this).hasClass('acym__email__new__card-list')) {
        jQuery('#acym__email__new__button-create').removeAttr('disabled');
      } else {
        jQuery('#acym__email__new__button-create').attr('disabled', 'true');
      }
    });
  },
  setSelectCreateNewMail: function setSelectCreateNewMail() {
    jQuery('.acym__email__new__card__select').on('change', function () {
      if (jQuery(this).closest('.acym__email__new__card').hasClass('acym__email__new__card-selected')) {
        if (jQuery(this).val() !== '') {
          jQuery('#acym__email__new__button-create').removeAttr('disabled');
        } else {
          jQuery('#acym__email__new__button-create').attr('disabled', 'true');
        }
      }
    });
  },
  setButtonCreateNewEmail: function setButtonCreateNewEmail() {
    jQuery('#acym__email__new__button-create').off('click').on('click', function () {
      var $cardSelected = jQuery('.acym__email__new__card-selected');
      var link = $cardSelected.attr('acym-data-link');

      if (link.indexOf('{listid}') !== -1) {
        var listId = $cardSelected.find('.acym__email__new__card__select').val();
        link = link.replace('{listid}', listId);
      }

      window.location.href = link;
    });
  },
  setClickFlagsSummary: function setClickFlagsSummary() {
    jQuery('.acym__campaign__summary__preview__languages-one').not('.acym__campaign__summary__preview__languages-one__empty').off('click').on('click', function () {
      if (jQuery(this).hasClass('language__selected')) return;
      jQuery('.language__selected').removeClass('language__selected');
      jQuery(this).addClass('language__selected');
      var idBody = '#acym__summary-body-' + jQuery(this).attr('data-acym-lang');
      var idSubject = '#acym__summary-subject-' + jQuery(this).attr('data-acym-lang');
      var idPreview = '#acym__summary-preview-' + jQuery(this).attr('data-acym-lang');
      jQuery('.acym__hidden__mail__content').val(jQuery(idBody).val());
      acym_helperPreview.loadIframe('acym__wysid__preview__iframe__acym__wysid__email__preview', false);
      jQuery('.acym__campaign__summary__email__information-subject').html(jQuery(idSubject).val());
      jQuery('.acym__campaign__summary__generated__mail__one__preview').html(jQuery(idPreview).val());
    });
  }
};
var acym_helperDatePicker = {
  setDatePickerGlobal: function setDatePickerGlobal() {
    jQuery('.acy_date_picker').off('click').on('click', function () {
      var $inputDatePicker = jQuery(this);
      var needTranslate = undefined === $inputDatePicker.attr('data-acym-translate') || $inputDatePicker.attr('data-acym-translate') !== '0';
      var $default = $inputDatePicker.val() ? moment($inputDatePicker.val(), 'YYYY-MM-DD HH:mm') : moment();
      new MaterialDatetimePicker({
        'default': $default
      }).on('submit', function (d) {
        $inputDatePicker.val(moment(d, 'MM-DD-YYYY').format(needTranslate ? 'DD MMM YYYY HH:mm' : 'YYYY-MM-DD HH:mm'));
        $inputDatePicker.trigger('change');
        $inputDatePicker.trigger('acy_change');
      }).open();
    });
  },
  setRelativeTime: function setRelativeTime($element) {
    var $parent = $element.closest('.reveal');
    var time = parseInt($parent.find('.relativenumber').val()) * parseInt($parent.find('.relativetype').val());
    jQuery('[data-rs="' + $parent.attr('id') + '"]').val('[time]' + (time > 0 ? $parent.find('.relativewhen').val() + time : ''));
    jQuery('[data-open="' + $parent.attr('id') + '"]').val('[time]' + (time > 0 ? $parent.find('.relativewhen').val() + time : '')).trigger('change');
  },
  setSpecificTime: function setSpecificTime($element) {
    var $parent = $element.closest('.reveal');
    var $intput = $parent.find('[name^="specific_"]');
    jQuery('[data-rs="' + $parent.attr('id') + '"]').val(moment($intput.val()).unix());
    jQuery('[data-open="' + $parent.attr('id') + '"]').val($intput.val()).trigger('change');
  },
  setRSDateChoice: function setRSDateChoice() {
    jQuery('.acym__button__clear__time').on('click', function () {
      var identifier = jQuery(this).closest('.reveal').attr('id');
      jQuery('[data-rs="' + identifier + '"]').val('');
      jQuery('[data-open="' + identifier + '"]').val('').trigger('change');
    });
    jQuery('.acym__button__set__time').on('click', function () {
      if ('relative' === jQuery(this).closest('.reveal').find('.date_rs_selection.is-active').attr('data-type')) {
        acym_helperDatePicker.setRelativeTime(jQuery(this));
      } else {
        acym_helperDatePicker.setSpecificTime(jQuery(this));
      }
    });
    jQuery('.date_rs_selection').off('click').on('click', function (e) {
      e.preventDefault();
      var $parent = jQuery(this).closest('.date_rs_selection_popup');
      $parent.find('.date_rs_selection').removeClass('is-active');
      jQuery(this).addClass('is-active');
      $parent.find('.date_rs_selection_choice').hide();
      $parent.find('.date_rs_selection_' + jQuery(this).attr('data-type')).show();
    });
    acym_helperDatePicker.resetThePopup();
  },
  resetThePopup: function resetThePopup() {
    jQuery('.rs_date_field').on('click', function () {
      var $self = jQuery(this);
      var $input = jQuery("[data-rs=\"".concat($self.attr('data-open'), "\"]"));
      var $modal = jQuery("#".concat($self.attr('data-open')));

      if (undefined === $input.val() || '' === $input.val() || $input.val() === '[time]') {
        $modal.find('.relativetype').val('60').trigger('change');
        $modal.find('.relativenumber').val('0').trigger('change');
        return true;
      }

      if ($input.val().indexOf('[time]') !== -1) {
        $modal.find('[data-type="relative"]').click();
        var operator = $input.val().indexOf('-') !== -1 ? '-' : '+';
        var splitValue = $input.val().split(operator);
        var seconds = parseInt(splitValue[1]);
        $modal.find('.relativewhen').val(operator).trigger('change');
        var finalValuePopup;
        var timelapse;

        if (seconds >= 86400 && seconds % 86400 === 0) {
          timelapse = 86400;
        } else if (seconds >= 3600 && seconds % 3600 === 0) {
          timelapse = 3600;
        } else {
          timelapse = 60;
        }

        finalValuePopup = seconds / timelapse;
        $modal.find('.relativetype').val(timelapse).trigger('change');
        $modal.find('.relativenumber').val(finalValuePopup).trigger('change');
      } else {
        $modal.find('[data-type="specific"]').click(); //We convert the unix time to a format the lib can understand

        $modal.find('.acy_date_picker').val(moment.unix($input.val()).format('YYYY-MM-DD HH:mm'));
      }
    });
  }
};
var acym_helperDebugger = {
  initDebugger: function initDebugger() {
    function KeyCheck(e) {
      if (e.key === 'F8') {
        debugger;
      }
    }

    window.addEventListener('keydown', KeyCheck, false);
  }
};
var acym_helperDynamic = {
  initPopup: function initPopup() {
    setTimeout(function () {
      jQuery('#acym__wysid__modal__dynamic-text__ui__iframe').contents().find('body').css('padding', 0).css('margin', 0).css('height', '100%');
      jQuery('#acym__wysid__modal__dynamic-text__ui__iframe').contents().find('body #acym_wrapper').css('min-height', '100%');
    }, 1000);
  },
  setModalDynamics: function setModalDynamics() {
    jQuery('.acym__wysid__modal__dynamic-text--close').off('click').on('click', function () {
      jQuery('#acym__wysid__modal__dynamic-text').hide();
    });
    jQuery('#dtext_subject_button').off('click').on('click', function (e) {
      e.preventDefault();
      jQuery('#acym__wysid__modal__dynamic-text__ui__iframe').contents().find('input[name="dtextcode"]').val('');
      jQuery('#acym__wysid__modal__dynamic-text').show();
    });
  }
};
var acym_helperEditorHtml = {
  initEditorHtml: function initEditorHtml() {
    acym_helperEditorHtml.setEditorField();
  },
  setEditorField: function setEditorField() {
    jQuery('#acym_form').on('submit', function () {
      if (typeof acyOnSaveEditor === 'function') acyOnSaveEditor();
    });
  }
};
var acym_helperEditorWysid = {};
jQuery(document).ready(function ($) {
  acym_helperEditorWysid = {
    initEditor: function initEditor() {
      if (jQuery('#acym__wysid').length < 1) return false;
      acym_helperEditorWysid.mailsSettings = acym_helperEditorWysid.saveSettings === '' ? {} : JSON.parse(acym_helperEditorWysid.saveSettings);
      jQuery('#editor_thumbnail').val('');
      jQuery('#acym__wysid__edit').append('<style id="acym__wysid__custom__style">' + acym_helperEditorWysid.parseTextToCss(acym_helperEditorWysid.savedStylesheet) + '</style>');
      acym_editorWysidVersioning.checkForUnsavedVersion();

      if (jQuery('#acym__walkthrough__email').length > 0) {
        jQuery('#acym__wysid').parent().insertAfter('#acym__walkthrough__email');
        jQuery('#acym__wysid__modal__dynamic-text').insertAfter('#acym__walkthrough__email');
      }

      acym_editorWysidImage.setChangeBuiltWithImage();
      acym_editorWysidDragDrop.setFixJquerySortableWYSID();
      acym_editorWysidDragDrop.setNewColumnElementDraggableWYSID();
      acym_editorWysidDragDrop.setNewRowElementDraggableWYSID();
      acym_editorWysidFormAction.setEditButtonWYSID();
      acym_editorWysidFormAction.setCancelButtonWYSID();
      acym_editorWysidFormAction.setSaveButtonWYSID();
      acym_editorWysidFormAction.setSaveAsTmplButtonWYSID();
      acym_editorWysidModal.setModalWindowWYSID();
      acym_editorWysidToolbar.setRightToolbarWYSID();
      acym_editorWysidModal.setDynamicsModal();
      acym_editorWysidFontStyle.setApplyStylesheetSettings();
      acym_editorWysidFontStyle.setOpenStylesheet();
      acym_editorWysidFontStyle.setCancelStylesheet();
      acym_editorWysidVersioning.setVersionControlCtrlZ();
      acym_helperEditorWysid.setAlertTimeoutSession();
      acym_editorWysidFontStyle.setSocialIconImport();
      acym_editorWysidTest.toggleSendTest();
      acym_editorWysidTest.sendTestAjax();
      acym_helperEditorWysid.preventSubmitEditor();
      jQuery('[id^="mce_"]').removeAttr('id');
      acym_editorWysidMultilingual.setLanguageSelection();
    },
    setColumnRefreshUiWYSID: function setColumnRefreshUiWYSID() {
      var reloadTinyMCE = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      jQuery('.ui-helper-hidden-accessible').remove();
      acym_editorWysidRowSelector.setRowSelector();
      acym_editorWysidImage.setImageWidthHeightOnInsert();
      acym_editorWysidDragDrop.setRowElementSortableWYSID();
      acym_editorWysidImage.setDoubleClickImage();
      acym_editorWysidDragDrop.setColumnElementDraggableWYSID();
      acym_editorWysidDragDrop.setColumnSortableWYSID();
      acym_editorWysidColorPicker.setGeneralColorPickerWYSID();
      acym_editorWysidContextModal.setButtonContextModalWYSID();
      acym_editorWysidContextModal.setSpaceContextModalWYSID();
      acym_editorWysidContextModal.setFollowContextModalWYSID();
      acym_editorWysidContextModal.setSeparatorContextModalWYSID();
      acym_editorWysidColorPicker.setSettingsColorPickerWYSID(acym_editorWysidFontStyle.getSettingsOfHtmlElementWYSID(jQuery('#acym__wysid__right__toolbar__settings__font--select').val(), 'color'));
      acym_editorWysidFontStyle.setSettingsWYSID();
      acym_editorWysidFontStyle.setSettingsControlsWYSID();
      acym_editorWysidFontStyle.setAllHtmlElementStyleWYSID();
      acym_helperEditorWysid.checkForEmptyTbodyWYSID();
      acym_helperEditorWysid.setSizeEditorWYSID();
      acym_helperEditorWysid.setSelectOneTemplate();
      acym_editorWysidDynammic.setDynamicsActions();
      acym_editorWysidDynammic.setTagPWordBreak();
      acym_editorWysidDynammic.setTagPreInserted();
      acym_helperEditorWysid.removeBlankCharacters();
      if (reloadTinyMCE) acym_editorWysidTinymce.addTinyMceWYSID();
      acym_editorWysidTinymce.checkForEmptyText();
      jQuery('.columns, .acym__wysid__column').css('height', 'auto');
      jQuery('.acym__wysid__column__element__button').css('overflow', 'unset'); //setShareContextModalWYSID();
    },
    checkForEmptyTbodyWYSID: function checkForEmptyTbodyWYSID() {
      var $wysidRows = jQuery('.acym__wysid__row');

      if ($wysidRows.length === 1) {
        var $columns = $wysidRows.find('.acym__wysid__column');

        if ($columns.length === 1 && !$columns.find('tbody').children().length && !jQuery('#acym__wysid__default').length) {
          $columns.addClass('acym__wysid__column__first');
          var dropMessage = '<div id="acym__wysid__default">';
          dropMessage += '<div id="acym__wysid__default__start" class="cell grid-x acym_vcenter">';
          dropMessage += '<h1 class="cell">' + ACYM_JS_TXT.ACYM_TEMPLATE_EMPTY + '</h1>';
          dropMessage += '<p class="cell">' + ACYM_JS_TXT.ACYM_DRAG_BLOCK_AND_DROP_HERE + '</p>';
          dropMessage += '</div>';
          dropMessage += '<div id="acym__wysid__default__dragging" style="display: none" class="cell grid-x acym_vcenter">';
          dropMessage += '<h1 class="cell text-center">' + ACYM_JS_TXT.ACYM_WELL_DONE_DROP_HERE + '</h1>';
          dropMessage += '</div>';
          dropMessage += '</div>';
          $columns.before(dropMessage);
          var $startDefault = jQuery('#acym__wysid__default__start');
          $startDefault.closest('#acym__wysid__default').attr('height', 'auto').closest('.columns').height($startDefault.height()).find('table').height($startDefault.height()).find('tbody').height($startDefault.height());
        }
      }

      $wysidRows.each(function () {
        if (jQuery(this).children().length == 0) {
          jQuery('.acym__wysid__row').append('<div id="acym__wysid__row__temp_div"></div>');
          acym_editorWysidNewRow.addRow1WYSID(jQuery('#acym__wysid__row__temp_div'));
          acym_editorWysidRowSelector.setRowSelector();
          acym_helperEditorWysid.checkForEmptyTbodyWYSID();
        } else {
          jQuery(this).css({
            'min-height': '0',
            'display': 'table-cell'
          });
        }
      });
      jQuery('.acym__wysid__column tbody').each(function () {
        jQuery(this).children().length == 0 ? jQuery(this).css({
          'min-height': '75px',
          'display': 'block'
        }).closest('table').css('min-height', '75px').css('display', 'block') : jQuery(this).css({
          'min-height': '0px',
          'display': 'table-row-group'
        }).closest('table').css('min-height', '0').css('display', 'table');
      });
    },
    removeBlankCharacters: function removeBlankCharacters() {
      var $linkImages = jQuery('.acym__wysid__link__image');
      jQuery.each($linkImages, function () {
        jQuery(this).html(jQuery(this).html().replace(/\uFEFF/g, ''));
      });
    },
    setSizeEditorWYSID: function setSizeEditorWYSID() {
      jQuery(window).off('resize').on('resize', function () {
        acym_editorWysidTinymce.addTinyMceWYSID();
        acym_helperEditorWysid.setSizeEditorWYSID();
      });
      var adminHeight;

      if (ACYM_CMS === 'wordpress') {
        adminHeight = jQuery('#wpadminbar').innerHeight();
      } else {
        if (ACYM_J40) {
          adminHeight = 0;
        } else {
          adminHeight = jQuery('nav.navbar').innerHeight() + jQuery('#status').innerHeight();
        }
      }

      var wrapperPaddingTop = jQuery(window).width() > 639 ? 56 : 0; //TODO replace with wrapper padding + topbar margin etc

      var toolbarTop = jQuery('#acym__wysid__top-toolbar').innerHeight();
      jQuery('#acym__wysid').css('min-height', jQuery(window).height() - (wrapperPaddingTop + adminHeight));
      jQuery('#acym__wysid__template').css({
        'max-height': jQuery(window).height() - (wrapperPaddingTop + adminHeight + toolbarTop + 64),
        'min-height': jQuery(window).height() - (wrapperPaddingTop + adminHeight + toolbarTop + 64)
      });
      jQuery('.acym__wysid__right-toolbar__content').css('max-height', jQuery(window).height() - (wrapperPaddingTop + adminHeight + 48));
    },
    setSelectOneTemplate: function setSelectOneTemplate() {
      jQuery('.acym__template__choose__ajax').off('DOMSubtreeModified').on('DOMSubtreeModified', function () {
        jQuery('.acym__template__choose__list .acym__templates__oneTpl').off('click').on('click', function (e) {
          e.preventDefault();
          var thisLink = jQuery(this).find('a').attr('href');
          var ajaxUrl = ACYM_AJAX_URL + '&page=acymailing_mails&ctrl=' + acym_helper.ctrlMails + '&task=getMailContent&from=' + jQuery(this).attr('id');
          jQuery.post(ajaxUrl, function (response) {
            if (response == 'error') {
              alert(ACYM_JS_TXT.ACYM_ERROR);
              return false;
            }

            window.location.href = thisLink;
            return false;
          });
        });
      });
    },
    parseTextToCss: function parseTextToCss(text) {
      var css = '';
      jQuery.parsecss(text, function (e) {
        jQuery('#acym__wysid__custom__style').remove();
        var stylesheetToApply = e;

        for (var key in stylesheetToApply) {
          var allCss = stylesheetToApply[key];
          var prependClass = key.indexOf('#acym__wysid__template') !== -1 ? '' : '#acym__wysid__template .body ';
          css += prependClass + key + '{';

          for (var keyCss in allCss) {
            css += keyCss + ':' + allCss[keyCss] + ';';
          }

          css += '} ';
        }
      });
      return css;
    },
    preventSubmitEditor: function preventSubmitEditor() {
      jQuery('#acym_wrapper').keydown(function (event) {
        if (event.keyCode == 13 && event.target.nodeName != 'TEXTAREA') {
          event.preventDefault();
          return false;
        }
      });
    },
    setAlertTimeoutSession: function setAlertTimeoutSession() {
      var $timeoutSessionInSeconds = jQuery('#acym__wysid__session--lifetime').val();
      var $timeoutToDisplayAlertInMilliseconds = ($timeoutSessionInSeconds - 60) * 1000;
      setTimeout(function () {
        acym_editorWysidNotifications.addEditorNotification({
          'message': ACYM_JS_TXT.ACYM_SESSION_IS_GOING_TO_END,
          'level': 'warning'
        });
      }, $timeoutToDisplayAlertInMilliseconds);
    },
    _selectedRows: [],
    $focusElement: '',
    saveSettings: jQuery('.acym__wysid__hidden__save__settings').val(),
    mailsSettings: {},
    insertDTextInSubject: true,
    stylesheetTemp: '',
    savedStylesheet: jQuery('.acym__wysid__hidden__save__stylesheet').val(),
    clicking: false,
    $resizingElement: '',
    versionControl: 0,
    timeClickImage: 0,
    dynamicPreviewIdentifier: 0,
    typingTimer: '',
    typingTimerGiphy: '',
    offsetGiphy: 0,
    queryGiphy: 'hello',
    defaultMailsSettings: {
      '#acym__wysid__background-colorpicker': {
        'background-color': '#efefef'
      },
      'p': {
        'font-family': 'Helvetica',
        'font-size': '12px',
        'font-weight': 'normal',
        'font-style': 'normal',
        'color': '#000000'
      },
      'a': {
        'font-family': 'Helvetica',
        'font-size': '12px',
        'font-weight': 'normal',
        'font-style': 'normal',
        'color': '#0000F1'
      },
      'li': {
        'font-family': 'Helvetica',
        'font-size': '12px',
        'font-weight': 'normal',
        'font-style': 'normal',
        'color': '#000000'
      },
      'h1': {
        'font-family': 'Helvetica',
        'font-size': '34px',
        'font-weight': 'normal',
        'font-style': 'normal',
        'color': '#000000'
      },
      'h2': {
        'font-family': 'Helvetica',
        'font-size': '30px',
        'font-weight': 'normal',
        'font-style': 'normal',
        'color': '#000000'
      },
      'h3': {
        'font-family': 'Helvetica',
        'font-size': '28px',
        'font-weight': 'normal',
        'font-style': 'normal',
        'color': '#000000'
      },
      'h4': {
        'font-family': 'Helvetica',
        'font-size': '24px',
        'font-weight': 'normal',
        'font-style': 'normal',
        'color': '#000000'
      },
      'h5': {
        'font-family': 'Helvetica',
        'font-size': '20px',
        'font-weight': 'normal',
        'font-style': 'normal',
        'color': '#000000'
      },
      'h6': {
        'font-family': 'Helvetica',
        'font-size': '18px',
        'font-weight': 'normal',
        'font-style': 'normal',
        'color': '#000000'
      }
    },
    socialMedia: {
      'facebook': {
        'src': ACYM_MEDIA_URL + '/images/logo/facebook.png',
        'link': '#',
        'text': 'Like'
      },
      'twitter': {
        'src': ACYM_MEDIA_URL + '/images/logo/twitter.png',
        'link': '#',
        'text': 'Tweet'
      },
      'pinterest': {
        'src': ACYM_MEDIA_URL + '/images/logo/pinterest.png',
        'link': '#',
        'text': 'pin it'
      },
      'linkedin': {
        'src': ACYM_MEDIA_URL + '/images/logo/linkedin.png',
        'link': '#',
        'text': 'share'
      },
      'instagram': {
        'src': ACYM_MEDIA_URL + '/images/logo/instagram.png'
      },
      'vimeo': {
        'src': ACYM_MEDIA_URL + '/images/logo/vimeo.png'
      },
      'wordpress': {
        'src': ACYM_MEDIA_URL + '/images/logo/wordpress.png'
      },
      'youtube': {
        'src': ACYM_MEDIA_URL + '/images/logo/youtube.png'
      }
    }
  };
});
var acym_helperErrorMessage = {
  initErrorMessage: function initErrorMessage() {
    var error = [];
    var isError = false;
    jQuery(document).on('invalid.zf.abide', function (ev, elt) {
      if (elt.is(':radio') && undefined === elt.attr('required')) {
        return;
      }

      jQuery('#formSubmit')[0].disabled = false; // Build error message

      var errorTxt = acym_helperErrorMessage.getErrorMessage(elt); // Create message display with timeout before removal

      elt.after('<div class="acym__input-error"><i class="acymicon-exclamation-circle"></i>' + errorTxt + '</div>');
      var $messages = jQuery('.acym__input-error');
      setTimeout(function () {
        $messages.remove();
      }, 5000);
      error = [];
    }).on('valid.zf.abide', function (e, ui) {
      if (ui.attr('type') === 'email' && ui.val() !== '') {
        error[0] = error[0] === undefined ? 0 : error[0];
        error[0] = !acym_helper.emailValid(ui.val()) || ui.val() === '' ? error[0] + 1 : 0;
      }
    }).on('submit', function (e) {
      var formSubmit = jQuery('#formSubmit')[0];
      if (formSubmit === undefined) return true;
      error[3] = error[3] === undefined ? 0 : error[3];
      var $userExport = jQuery('#acym__users__export');
      var $listsSelected = $userExport.find('#acym__modal__lists-selected');
      var $usersToExport = jQuery('input[name="export_users-to-export"]:checked');

      if ($userExport.length > 0 && $usersToExport.val() === 'list' && $listsSelected.val() === '[]') {
        error[3]++;
        acym_helperNotification.addNotification(ACYM_JS_TXT.ACYM_EXPORT_SELECT_LIST, 'error');
      } else if ($userExport.length > 0 && $usersToExport.val() === 'list' && $listsSelected.val() !== '[]') {
        error[3] = 0;
      }

      if (error.length > 0) {
        jQuery.each(error, function (key, value) {
          if (value > 0) {
            isError = true;
          }
        });
      }

      if (isError) {
        formSubmit.disabled = false;
        e.preventDefault();
        isError = false;
      } else {
        formSubmit.disabled = true;
        isError = false;
      }
    });
  },
  getErrorMessage: function getErrorMessage(elt) {
    var typeElt = elt.attr('type');
    var patternElt = elt.attr('pattern');
    var requiredElt = elt.attr('required');
    var errorTxt = []; // Required

    if (requiredElt !== undefined) {
      errorTxt.push(ACYM_JS_TXT.requiredMsg + '.');
    }

    if (typeElt === 'email') {
      errorTxt.push(ACYM_JS_TXT.email);
    } else if (typeElt === 'text') {
      if (patternElt !== undefined && ACYM_JS_TXT[patternElt] !== undefined) {
        errorTxt.push(ACYM_JS_TXT[patternElt]);
      } else {
        errorTxt.push(ACYM_JS_TXT.defaultMsg);
      }
    }

    return errorTxt.join(' ');
  }
};
var acym_helperFile = {
  initFile: function initFile() {
    acym_helperFile.setAttachment();
    acym_helperFile.setDisplayFileTree();
    acym_helperFile.setChangeFolder();
  },
  setAttachment: function setAttachment() {
    // Add selected file to hidden input
    jQuery('.acym__file__select__add').off('click').on('click', function (evt) {
      var mapId = jQuery('#acym__file__select__mapid').val();
      var mapData = evt.currentTarget.getAttribute('mapdata');
      var currentPath = jQuery('#currentPath').val();
      jQuery('#' + mapId, window.parent.document).val(currentPath + '/' + mapData);
      jQuery('#' + mapId + 'suppr', window.parent.document).css('display', '');

      if (mapData.length > 30) {
        mapData = mapData.substr(0, 12) + '...' + mapData.substr(mapData.length - 12);
      }

      jQuery('#' + mapId + 'selection', window.parent.document).html(mapData);
      jQuery('#acym__campaign__email__' + mapId, window.parent.document).closest('.reveal-overlay').click();
    });
  },
  setDisplayFileTree: function setDisplayFileTree() {
    // display folders tree view
    jQuery('#displaytree').on('click', function () {
      var $treefile = jQuery('#treefile');

      if ($treefile.css('display') === 'none') {
        $treefile.css('display', 'block');
      } else {
        $treefile.css('display', 'none');
      }
    });
  },
  setChangeFolder: function setChangeFolder() {
    // Chamge the current folder to relad the content with the right files
    jQuery('.tree-child-item').off('click').on('click', function (evt) {
      evt.stopPropagation();
      evt.preventDefault();
      var path = evt.currentTarget.getAttribute('data-path');
      var url = window.location.href;
      var lastParam = url.substring(url.lastIndexOf('&') + 1);
      lastParam = lastParam.split('=');

      if (lastParam === 'selected_folder') {
        url = url.replace(lastParam, 'selected_folder=' + path);
      } else {
        url += '&currentFolder=' + path;
      }

      window.location.href = url;
    });
  }
};
var acym_helper = {
  ctrlMails: ACYM_IS_ADMIN ? 'mails' : 'frontmails',
  ctrlDynamics: ACYM_IS_ADMIN ? 'dynamics' : 'frontdynamics',
  ctrlLists: ACYM_IS_ADMIN ? 'lists' : 'frontlists',
  ctrlUsers: ACYM_IS_ADMIN ? 'users' : 'frontusers',
  ctrlCampaigns: ACYM_IS_ADMIN ? 'campaigns' : 'frontcampaigns',
  emailValid: function emailValid(email) {
    return email.match(ACYM_REGEX_EMAIL) !== null;
  },
  escape: function escape(str) {
    str = str.replace(/"/g, '&quot;');
    return str;
  },
  parseJson: function parseJson(json, defaultValue) {
    try {
      var begin = json.indexOf('{');
      var beginBrackets = json.indexOf('[');

      if (!isNaN(begin) && begin > 0 && !isNaN(beginBrackets) && beginBrackets > 0) {
        json = json.substring(begin);
      }

      if (json !== undefined || json !== '') return JSON.parse(json);
    } catch (error) {
      console.log(error.stack);
    }

    return defaultValue;
  },
  sprintf: function sprintf() {
    var args = Object.values(arguments);
    var returnTranslation = args.splice(0, 1)[0];

    if (args.length === 1) {
      returnTranslation = returnTranslation.replace('%s', args[0]);
    } else {
      jQuery.each(args, function (index, value) {
        returnTranslation = returnTranslation.replace('%' + (index + 1) + '$s', value);
      });
    }

    return returnTranslation;
  },
  setSubmitButtonGlobal: function setSubmitButtonGlobal() {
    jQuery('.acy_button_submit').off('click').on('click', function (e) {
      if (jQuery(this).attr('data-force-submit') !== undefined) jQuery('[required]').removeAttr('required');

      if (jQuery(this).hasClass('disabled')) {
        return false;
      } //stop previous submit


      e.preventDefault(); // We may want to add a condition on a submit button, something not checkable with the form validation script

      var condition = jQuery(this).attr('data-condition');

      if (condition && typeof jQuery[condition] === 'function' && !jQuery[condition]()) {
        return false;
      }

      var confirmationMessage = jQuery(this).attr('data-confirmation-message');

      if (_typeof(confirmationMessage) !== (typeof undefined === "undefined" ? "undefined" : _typeof(undefined)) && !acym_helper.confirm(ACYM_JS_TXT[confirmationMessage])) {
        return false;
      }

      if (jQuery(this).attr('acym-data-before')) {
        var result = eval(jQuery(this).attr('acym-data-before'));
        if (result === false) return false;
      }

      var $form = jQuery('#acym_form');
      var task = jQuery(this).attr('data-task');
      var controller = jQuery(this).attr('data-ctrl');

      if (controller !== undefined) {
        $form.find('[name=ctrl]').val(controller);
      }

      $form.find('[name="task"]').val(task);
      var step = jQuery(this).attr('data-step');

      if (step != null) {
        $form.find('[name="nextstep"]').val(step);
      } //for the automations


      var and = jQuery(this).attr('data-and');

      if (and != null) {
        $form.append('<input type="hidden" value="' + and + '" name="and_action">');
      } // This garbage code is for the required fields and the Edge/IE fucking compatibility


      var $buttonSubmit = $form.find('#formSubmit');

      if ($buttonSubmit[0] == undefined) {
        var evt = new MouseEvent('click');
        document.querySelector('#formSubmit').dispatchEvent(evt);
      } else {
        $buttonSubmit.click();
      }
    });
  },
  setDeleteOptionsGlobal: function setDeleteOptionsGlobal() {
    jQuery('.acym__listing__block__delete__trash').off('click').on('click', function (e) {
      e.preventDefault();
      var $blockDelete = jQuery(this).closest(' .acym__listing__block__delete');
      $blockDelete.css('width', '80px');
      $blockDelete.find('div>i').css('width', '0');
      $blockDelete.animate({
        maxWidth: '80px'
      }, 'fast', function () {
        jQuery('.acym__listing__block__delete__cancel', this).off('click').on('click', function () {
          acym_helper.setHideDeleteOptionsGlobal(jQuery(this).closest('.acym__listing__block__delete'));
        });
      });
      jQuery('.acym__listing__block').off('mouseleave').on('mouseleave', function () {
        acym_helper.setHideDeleteOptionsGlobal(jQuery(this).find('.acym__listing__block__delete'));
      });
    });
  },
  setHideDeleteOptionsGlobal: function setHideDeleteOptionsGlobal($blockDelete) {
    jQuery('.acym__listing__block__delete__cancel').off('click');
    $blockDelete.animate({
      maxWidth: '40px'
    }, 'fast', function () {
      $blockDelete.find('i').css('width', '40px');
    });
  },
  confirm: function (_confirm) {
    function confirm(_x) {
      return _confirm.apply(this, arguments);
    }

    confirm.toString = function () {
      return _confirm.toString();
    };

    return confirm;
  }(function (text) {
    return confirm(text);
  }),
  setMessageClose: function setMessageClose() {
    jQuery('.acym_message i.acymicon-remove').off('click').on('click', function () {
      jQuery(this).parent().remove();
    });
  },
  preventEnter: function preventEnter() {
    jQuery('#acym_wrapper').on('keypress', ':input:not(textarea, input:text)', function (event) {
      if (event.keyCode === 13 && !jQuery('[name$="_pagination_page"], [name="pagination_page_ajax"]').is(':visible')) {
        event.preventDefault();
        return false;
      }
    });
  },
  getIntValueWithoutPixel: function getIntValueWithoutPixel(str) {
    if (undefined === str || '' === str) return 0;
    return parseInt(str.replace(/[^-\d\.]/g, ''));
  },
  empty: function empty(str) {
    if (str === null) return true;
    if (typeof str === 'undefined') return true;
    if (str === undefined) return true;
    if (str === '') return true;
    if (str.length === 0) return true;
    if (str === 0) return true;
    if (str === '0') return true;
    return str === false;
  },
  alert: function (_alert) {
    function alert(_x2) {
      return _alert.apply(this, arguments);
    }

    alert.toString = function () {
      return _alert.toString();
    };

    return alert;
  }(function (text) {
    return alert(text);
  }),
  getCookie: function getCookie(cookieKey) {
    var returnValue = '';
    var cookies = document.cookie.split(';');
    cookies.map(function (cookie) {
      cookie = cookie.trim().split('=');
      if (cookie[0] === cookieKey) returnValue = cookie[1];
    });
    return returnValue;
  },
  setCookie: function setCookie(cookieName, value, expiredays) {
    var newCookie = cookieName + '=' + this.escape(value);

    if (expiredays != null) {
      var exdate = new Date();
      exdate.setDate(exdate.getDate() + expiredays);
      newCookie += ';expires=' + exdate.toUTCString();
    }

    document.cookie = newCookie;
  },
  get: function get() {
    var _this = this;

    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ACYM_AJAX_URL;
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return jQuery.get(url, data).then(function (res) {
      if (_typeof(res) !== 'object') res = _this.parseJson(res);
      if (res.error && !_this.empty(res.message)) console.error(res.message);
      return res;
    }).fail(function (xhr, status, error) {
      console.error("Error calling ".concat(url, ", responded with error ").concat(status, " ").concat(error));
      return error;
    });
  },
  post: function post() {
    var _this2 = this;

    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ACYM_AJAX_URL;
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return jQuery.post(url, data).then(function (res) {
      if (_typeof(res) !== 'object') res = _this2.parseJson(res);
      if (res.error && !_this2.empty(res.message)) console.error(res.message);
      return res;
    }).fail(function (xhr, status, error) {
      console.error("Error calling ".concat(url, ", responded with error ").concat(status, " ").concat(error));
      return error;
    });
  },
  sameArrays: function sameArrays(array1, array2) {
    return array1.length === array2.length && array1.every(function (value, index) {
      return value === array2[index];
    });
  }
};
var acym_helperImport = {
  initImport: function initImport() {
    acym_helperImport.setVerificationGenericImport();
    acym_helperImport.setImportCMSLists();
    acym_helperImport.setImportFromFileEvent();
    acym_helperImport.setImportSubmit();
    acym_helperImport.setChangeCharset();
    acym_helperImport.setChangeTableName();
    acym_helperImport.setCreateListFromImportPage();
  },
  setImportCMSLists: function setImportCMSLists() {
    var $submitButton = jQuery('#acym__users__import__from_database').is(':visible') ? jQuery('#submit_import_database') : jQuery('#submit_import_cms');
    jQuery('.acym__users__import__button').off('click').on('click', function () {
      $submitButton.click();
    });
    jQuery('#acym__users__import__skip__button').off('click').on('click', function () {
      jQuery('[name="acym__entity_select__selected"]').attr('value', '');
      $submitButton.click();
    });
  },
  setVerificationGenericImport: function setVerificationGenericImport() {
    var $submitButton = jQuery('#formSubmit');
    jQuery('.acym__users__import__generic__import__button').off('click').on('click', function () {
      if (acym_helperImport.verifyGenericImport()) {
        $submitButton.click();
      }
    });
    jQuery('#acym__users__generic__import__skip__button').off('click').on('click', function () {
      if (acym_helperImport.verifyGenericImport()) {
        jQuery('[name="acym__entity_select__selected"]').attr('value', '');
        $submitButton.click();
      }
    });
  },
  verifyGenericImport: function verifyGenericImport() {
    if (jQuery(this).attr('id') === 'no-list') {
      jQuery('#acym__modal__lists-selected').attr('value', '');
      jQuery('#acym__import__new-list').attr('value', '');
    }

    var subval = true;
    var errors = '';
    var string = '';
    var emailField = false;
    var columns = '';
    var selectedFields = [];
    var $checkboxIgnoreValue = jQuery('#acym__users__import__from_file__ignore__checkbox').is(':checked');
    var fieldNb = jQuery('.fieldAssignment').length;
    if (isNaN(fieldNb)) fieldNb = 1;

    for (var i = 0; i < fieldNb; i++) {
      var $fieldAssignement = jQuery('#fieldAssignment' + i);
      string = $fieldAssignement.val();

      if (string == 0) {
        if ($checkboxIgnoreValue) {
          $fieldAssignement.val(1);
          string = 1;
        } else {
          acym_helperImport.setColorUnassignedField($fieldAssignement);
          subval = false;
          errors += '\n' + acym_helper.sprintf(ACYM_JS_TXT.ACYM_ASSIGN_COLUMN_TO_FIELD, i + 1);
        }
      }

      if (string == 'email') {
        emailField = true;
      }

      if (string != 1 && selectedFields.indexOf(string) !== -1) {
        subval = false;
        errors += '\n' + acym_helper.sprintf(ACYM_JS_TXT.ACYM_DUPLICATE_X_FOR_X, string, i + 1);
      } else {
        selectedFields.push(string);
      }

      columns += ',' + string;
    }

    if (!emailField) {
      subval = false;
      errors += '\n' + ACYM_JS_TXT.ACYM_ASSIGN_EMAIL_COLUMN;
    }

    if (subval === false) {
      alert(ACYM_JS_TXT.ACYM_FILL_ALL_INFORMATION + '\n' + errors);
      return false;
    }

    if (columns.substr(0, 1) === ',') {
      columns = columns.substring(1);
    }

    jQuery('#import_columns').val(columns);
    return true;
  },
  setColorUnassignedField: function setColorUnassignedField($select) {
    if ($select.val() == 0) {
      $select.addClass('fieldAssignmentError');
    } else {
      $select.removeClass('fieldAssignmentError');
    }
  },
  setImportFromFileEvent: function setImportFromFileEvent() {
    var $inputFile = jQuery('#acym__users__import__from_file__import__input');
    $inputFile.val(null);
    $inputFile.off('change').on('change', function () {
      var $form = jQuery('#acym_form');

      if (this.files.length > 0 && this.files[0].name.substr(this.files[0].name.length - 3).toLowerCase() === 'csv') {
        jQuery('.acym__users__import__from_file__file-name').html(this.files[0].name);
        jQuery('.acym__users__import__from_file__file').show();
        jQuery('.acym__users__import__from_file__choose').hide();
        jQuery('.acym__users__import__from_file__button-valid').removeAttr('disabled');
        jQuery('.acym__users__import__from_file__file__close').off('click').on('click', function () {
          jQuery('.acym__users__import__from_file__file-name').html('');
          jQuery('.acym__users__import__from_file__button-valid').prop('disabled', true);
          jQuery('.acym__users__import__from_file__file').hide();
          jQuery('.acym__users__import__from_file__choose').show();
          $inputFile.val(null);
        });
        jQuery('.acym__users__import__from_file__button-valid').off('click').on('click', function () {
          $form.find('[name="import_from"]').val('file');
          $form.submit();
        });
      } else {
        acym_helperNotification.addNotification(ACYM_JS_TXT.ACYM_COULD_NOT_UPLOAD_CSV_FILE, 'error');
      }
    });
  },
  setImportSubmit: function setImportSubmit() {
    jQuery('.acym__import__submit').on('click', function () {
      var $from = jQuery(this).attr('data-from');
      var $form = jQuery('#acym_form');
      $form.find('[name="import_from"]').val($from);
      $form.find('#formSubmit').click();
    });
  },
  setChangeCharset: function setChangeCharset() {
    jQuery('#acyencoding').off('change').on('change', function () {
      var URL = ACYM_AJAX_URL + '&ctrl=' + acym_helper.ctrlUsers + '&task=ajaxEncoding&encoding=' + jQuery(this).val() + '&filename=' + jQuery(this).attr('data-filename');
      var selectedDropdowns = '';
      var fieldNb = jQuery('.fieldAssignment').length;
      if (isNaN(fieldNb)) fieldNb = 1;

      for (var i = 0; i < fieldNb; i++) {
        selectedDropdowns += '&fieldAssignment' + i + '=' + jQuery('#fieldAssignment' + i).val();
      }

      URL += selectedDropdowns;
      jQuery.post(URL, function (response) {
        jQuery('#acym__users__import__generic__matchdata').html(response);
      });
    });
  },
  setChangeTableName: function setChangeTableName() {
    var tableName = '';
    jQuery('#acym__users__import__from_database__field--tablename').off('change').on('change', function () {
      tableName = jQuery(this).val();
      jQuery('#select2-acym__users__import__from_database__field--tablename-container').html(tableName);
      var url = ACYM_AJAX_URL + '&ctrl=' + acym_helper.ctrlUsers + '&task=getColumnsFromTable&tablename=' + tableName;
      jQuery.post(url, function (response) {
        jQuery('.acym__users__import__from_database__fields').html(response);
      });
    });
  },
  setCreateListFromImportPage: function setCreateListFromImportPage() {
    var $buttonImport = jQuery('#acym__users__import__create-list__button');
    var $buttonGenericImport = jQuery('#acym__users__generic__import__create-list__button');
    $buttonImport.off('click').on('click', function () {
      jQuery(this).html(ACYM_JS_TXT.ACYM_SAVE);
      acym_helperImport.setActionListenerButtonCreateList(false);
    });
    $buttonGenericImport.off('click').on('click', function () {
      jQuery(this).html(ACYM_JS_TXT.ACYM_SAVE);
      acym_helperImport.setActionListenerButtonCreateList(true);
    });
  },
  setActionListenerButtonCreateList: function setActionListenerButtonCreateList(isGeneric) {
    var $fieldDiv = jQuery('#acym__users__import__create-list');
    var $field = jQuery('#acym__users__import__create-list__field');
    var $modalWindow = jQuery('#acym__user__import__add-subscription__modal');

    if ($fieldDiv.is(':visible')) {
      if ($field.val() === '') return;
      jQuery('#acym__users__import__create-list__loading-logo').show();
      var selectedListsIds = jQuery('[name="acym__entity_select__selected"]').val();
      var url = ACYM_AJAX_URL + '&ctrl=' + acym_helper.ctrlLists + '&task=ajaxCreateNewList&list_name=' + encodeURIComponent($field.val()) + '&generic=' + (isGeneric ? '1' : '0') + '&selected=' + selectedListsIds;
      jQuery.post(url, function (response) {
        $modalWindow.html(response);
        $modalWindow.children().show();
        $modalWindow.children().append('<button class="close-button" data-close aria-label="Close reveal" type="button"><span aria-hidden="true">&times;</span></button>');
        $fieldDiv.hide();
        jQuery(window).trigger('refreshEntitySelect');
        jQuery('#acym__users__import__create-list__loading-logo').hide();
        acym_helperImport.setCreateListFromImportPage();
      });
    } else {
      $fieldDiv.show();
      $field.focus();
    }

    $field.keydown(function (event) {
      if (event.keyCode === 13) {
        event.preventDefault();
        return false;
      }
    });
  }
};
var acym_helperInput = {
  setInputFile: function setInputFile() {
    jQuery('.acym__button__file').off('click').on('click', function () {
      var $button = jQuery(this);
      var $inputFile = $button.prev();
      $inputFile.click();
      $inputFile.off('change').on('change', function () {
        $button.next().html(jQuery(this).val().split('\\').pop());
      });
    });
  }
};
var acym_helperListing = {
  initJsListing: function initJsListing() {
    acym_helperListing.setCheckAll();
    acym_helperListing.setOrdering();
    acym_helperListing.setSelectActions();
    acym_helperListing.setCheckboxesActionsListings();
    acym_helperToolbar.initToolbar();
  },
  setSortableListing: function setSortableListing() {
    jQuery('.acym__sortable__listing').sortable({
      items: '.acym__listing__row',
      handle: '.acym__sortable__listing__handle',
      animation: 150,
      stop: function stop(event, ui) {
        var list = jQuery('.acym__sortable__listing .acym__listing__row');
        var ctrl = jQuery('.acym__sortable__listing').attr('data-sort-ctrl');
        var order = [];
        list.each(function (i) {
          order.push(jQuery(this).attr('data-id-element'));
        });
        order = JSON.stringify(order);
        var ajaxUrl = ACYM_AJAX_URL + '&ctrl=' + ctrl + '&task=setOrdering&order=' + order;
        jQuery.post(ajaxUrl, function (response) {
          if (response == 'error') {
            console.log('Error can\'t order these elements');
          }
        });
      }
    });
  },
  setCheckAll: function setCheckAll() {
    jQuery('#checkbox_all').off('change').on('change', function () {
      var listing_checkboxes = jQuery('[name="elements_checked[]"]');

      if (jQuery(this).is(':checked')) {
        listing_checkboxes.prop('checked', true);
      } else {
        listing_checkboxes.prop('checked', false);
      }

      listing_checkboxes.trigger('change');
    });
  },
  setOrdering: function setOrdering() {
    jQuery('#acym__listing__ordering').off('change').on('change', function () {
      var form = jQuery(this).closest('#acym_form');
      var ctrl = form.find('[name="ctrl"]').val();

      if (ctrl != 'campaigns') {
        form.find('[name="task"]').val('listing');
      }

      form.submit();
    });
    jQuery('.acym__listing__ordering__sort-order').off('click').on('click', function () {
      var inputSortOrder = jQuery('#acym__listing__ordering__sort-order--input');
      var form = jQuery(this).closest('#acym_form');

      if (inputSortOrder.val() === 'asc') {
        inputSortOrder.val('desc');
      } else {
        inputSortOrder.val('asc');
      }

      if (form.find('[name="task"]').val() === '') {
        form.find('[name="task"]').val('listing');
      }

      form.submit();
    });
    jQuery('.acym__select__sort').on('change', function () {
      jQuery(this).closest('#acym_form').submit();
    });
  },
  setSelectActions: function setSelectActions() {
    if (ACYM_IS_ADMIN) {
      jQuery('#listing_actions').select2({
        theme: 'foundation',
        minimumResultsForSearch: Infinity
      });
    }

    jQuery('#listing_actions').off('change').on('change', function () {
      var action = this.value;
      var confirmMessage = '';
      var deleteMessageComplete = jQuery('#acym__listing__action__delete-message').val();

      switch (action) {
        case 'delete':
          confirmMessage = "".concat(ACYM_JS_TXT.ACYM_ARE_YOU_SURE_DELETE, " ").concat(deleteMessageComplete);
          break;

        case 'setActive':
          confirmMessage = ACYM_JS_TXT.ACYM_ARE_YOU_SURE_ACTIVE;
          break;

        case 'setInactive':
          confirmMessage = ACYM_JS_TXT.ACYM_ARE_YOU_SURE_INACTIVE;
          break;

        default:
          confirmMessage = ACYM_JS_TXT.ACYM_ARE_YOU_SURE;
      }

      if ('duplicate' == action || acym_helper.confirm(confirmMessage)) {
        var form = jQuery(this).closest('#acym_form');
        var ctrl = jQuery(this).attr('data-ctrl');

        if (ctrl !== undefined) {
          form.find('[name="return_listing"]').val(form.find('[name="ctrl"]').val());
          form.find('[name="ctrl"]').val(ctrl);
        }

        form.find('[name="task"]').val(jQuery(this).val());
        form.submit();
      } else {
        jQuery(this).val('0');
      }
    });
  },
  setCheckboxesActionsListings: function setCheckboxesActionsListings() {
    var listing_checkboxes = jQuery('[name="elements_checked[]"]');
    listing_checkboxes.off('change').on('change', function () {
      var nbChecked = jQuery('[name="elements_checked[]"]:checked').length;

      if (nbChecked === 1) {
        jQuery('.acym__campaign__duplicate').show();
      } else {
        jQuery('.acym__campaign__duplicate').hide();
      } // Shows the "Actions" dropdown when a box is checked


      if (nbChecked > 0) {
        jQuery('#listing_actions').removeAttr('disabled');
      } else {
        jQuery('#listing_actions').attr('disabled', 'true');
      } // Updates the "Check all" box


      if (jQuery('[name="elements_checked[]"]:not(:checked)').length > 0) {
        jQuery('#checkbox_all').prop('checked', false);
      } else {
        jQuery('#checkbox_all').prop('checked', true);
      } //Si on est sur le listing user, on fait le compte des utilisateurs cochés.


      if (jQuery('#acym__users').length) {
        var $nbToExport = jQuery('#acym__users__listing__number_to_export');
        var $nbToAddToList = jQuery('#acym__users__listing__number_to_add_to_list');
        var $buttonAddToList = jQuery('#acym__users__listing__button--add-to-list');

        if (nbChecked == 0) {
          $nbToExport.html($nbToExport.attr('data-default'));
          $buttonAddToList.addClass('disabled').attr('disabled', 'true');
          $nbToAddToList.html(nbChecked);
        } else {
          $nbToExport.html(nbChecked);
          $buttonAddToList.removeClass('disabled').removeAttr('disabled');
          $nbToAddToList.html(nbChecked);
        }
      }

      if (jQuery('#acym__lists').length) {
        var _$nbToExport = jQuery('#acym__lists__listing__number_to_export');

        if (nbChecked == 0) {
          _$nbToExport.html(_$nbToExport.attr('data-default'));
        } else {
          _$nbToExport.html(nbChecked);
        }
      }
    });
    listing_checkboxes.trigger('change');
  }
};
var acym_helperModal = {
  isMultilingualEdition: jQuery('#acym__wysid__edit__languages').length > 0,
  initModal: function initModal() {
    //global
    acym_helperModal.setPopupIframeToggleGlobal(); //Lists

    acym_helperModal.setShowSelectedOrShowAllListsModalPaginationLists();
    acym_helperModal.setButtonModalPaginationLists();
    acym_helperModal.setSearchListModalPaginationLists();
    acym_helperModal.getContentAjaxModalPaginationLists(); //Users

    acym_helperModal.setButtonModalPaginationUsers();
    acym_helperModal.setShowSelectedOrShowAllUsersModalPaginationUsers();
    acym_helperModal.setSearchUserModalPaginationUsers();
    acym_helperModal.setButtonConfirmModalPaginationUsers();
    acym_helperModal.initOverlay();
  },
  initOverlay: function initOverlay() {
    /**
     * Move foundation's modal inside our AcyMailing wrapper (for foundation css)
     */
    if (jQuery('#acym_form').length && !jQuery('#acym__editor__content').length && !jQuery('.campaigns_edit_email').length && !jQuery('.frontcampaigns_edit_email').length) {
      jQuery('.reveal-overlay').appendTo('#acym_form');
    } else {
      jQuery('.reveal-overlay').appendTo('#acym_wrapper');
    }
  },
  setResetMail: function setResetMail() {
    jQuery('.acym__automation__action__reset__mail').off('click').on('click', function () {
      if (acym_helper.confirm(ACYM_JS_TXT.ACYM_ARE_YOU_SURE)) {
        var $input = jQuery(this).closest('.acym__automation__inserted__action').find('[name$="[mail_id]"]');
        var $html = jQuery(this).parent();
        var ajaxUrl = ACYM_AJAX_URL + '&page=acymailing_mails&ctrl=' + acym_helper.ctrlMails + '&task=deleteMailAutomation&id=' + $input.val();
        jQuery.get(ajaxUrl, function (res) {
          $input.val('').prev().html(ACYM_JS_TXT.ACYM_CREATE_MAIL);
          $html.html('');
          acym_helperModal.setAjaxCallStartFrom();
        });
      }
    });
  },
  setAjaxCallStartFrom: function setAjaxCallStartFrom() {
    var ajaxUrl = ACYM_AJAX_URL + '&page=acymailing_mails&ctrl=' + acym_helper.ctrlMails + '&task=getTemplateAjax';
    var $returnInput = jQuery('input[name="return"]');
    var automation = $returnInput.length > 0 && $returnInput.val().indexOf('automation') !== -1 || jQuery('#acym__automation__actions__json').length > 0 ? '1' : '0';
    var mailId = jQuery('input[name="id"]').val();
    var $followupinput = jQuery('input[name="followup[id]"]');

    if ($followupinput.length > 0) {
      ajaxUrl += '&followup_id=' + $followupinput.val();
    }

    if (this.isMultilingualEdition) {
      ajaxUrl += '&is_multilingual_edition=1';
    }

    ajaxUrl += '&search=' + jQuery('#acym_search_template_choose__ajax').val();
    ajaxUrl += '&tag=' + jQuery('#acym_tag_template_choose__ajax').val();
    ajaxUrl += '&type=' + jQuery('#acym__mail__type').val();
    ajaxUrl += '&pagination_page_ajax=' + jQuery('#acym_pagination__ajax').val();
    ajaxUrl += '&editor=' + jQuery('#acym__mail__edit__editor').val();
    ajaxUrl += '&automation=' + automation;
    ajaxUrl += '&inmail=' + (jQuery('#editor_autoSave').length > 0 ? '1' : '0');
    ajaxUrl += '&id=' + (undefined === mailId ? 0 : mailId);
    ajaxUrl += '&acym_pagination_element_per_page=' + jQuery('[name="acym_pagination_element_per_page"]').val();
    if ($returnInput.length >= 1) ajaxUrl += '&return=' + encodeURIComponent($returnInput.val());
    jQuery.post(ajaxUrl, function (response) {
      jQuery('.acym__template__choose__ajax').html(response);
      acym_helperModal.setSearchAjaxModalChooseTemplateStartFrom();
      acym_helperModal.setPaginationAjaxStartFrom();
      acym_helperModal.setStartFromHtmlEditor();
      if (acym_helperModal.isMultilingualEdition) acym_editorWysidMultilingual.setClickStartFromTemplate();
      if (jQuery('#acym__automation__actions').length > 0) acym_helperModal.chooseOneTemplate();
    });
  },
  setPaginationAjaxStartFrom: function setPaginationAjaxStartFrom() {
    jQuery('.acym__template__choose__ajax .acym__pagination__page__ajax').off('click').on('click', function (e) {
      e.preventDefault();
      jQuery('#acym_pagination__ajax').attr('value', jQuery(this).attr('page'));
      acym_helperModal.setAjaxCallStartFrom();
    });

    if (ACYM_IS_ADMIN) {
      jQuery('[name="acym_pagination_element_per_page"]').select2({
        theme: 'foundation',
        width: '100%'
      });
    }

    jQuery('#acym_pagination__ajax, [name="acym_pagination_element_per_page"]').on('change', function () {
      acym_helperModal.setAjaxCallStartFrom();
    });
  },
  setSearchAjaxModalChooseTemplateStartFrom: function setSearchAjaxModalChooseTemplateStartFrom() {
    acym_helperModal.setSearchValueStartFrom();
    acym_helperModal.setSelectTagStartFrom();
    acym_helperModal.setChoosenTypeStartFrom();
  },
  setStartFromHtmlEditor: function setStartFromHtmlEditor() {
    if (jQuery('#acym__mail__edit__editor').val() !== 'acyEditor' && jQuery('#acym__automation__actions').length < 1) {
      jQuery('.reveal .acym__templates__oneTpl').on('click', function () {
        window.location.replace(jQuery(this).find('a').attr('href'));
      });
      jQuery('.acym__templates__choose__ribbon').on('click', function () {
        window.location.replace(jQuery(this).closest('.acym__templates__pic').find('a').attr('href'));
      });
    }
  },
  chooseOneTemplate: function chooseOneTemplate() {
    jQuery('.acym__templates__oneTpl').off('click').on('click', function () {
      var ajaxUrl = ACYM_AJAX_URL + '&page=acymailing_mails&ctrl=' + acym_helper.ctrlMails + '&task=duplicateMailAutomation&id=' + jQuery(this).attr('id');
      var $modal = jQuery('#acym__template__choose__modal');
      var $actionContainer = jQuery('[data-modal-name="' + $modal.attr('data-button') + '"]').closest('.acym__automation__inserted__action');
      ajaxUrl += '&previousId=' + $actionContainer.find('[name$="[mail_id]"]').val();
      jQuery.get(ajaxUrl, function (res) {
        var mail = acym_helper.parseJson(res, {
          'error': acym_helper.sprintf(ACYM_JS_TXT.ACYM_NOT_FOUND, ACYM_JS_TXT.ACYM_EMAIL)
        });

        if (undefined !== mail.error) {
          alert(mail.error);
          return false;
        }

        $actionContainer.find('.acym__automation__action__mail__name').html(mail.name + '<i class="cursor-pointer acymicon-close acym__color__red acym__automation__action__reset__mail margin-left-1"></i>');
        $actionContainer.find('[name$="[mail_id]"]').val(mail.id);
        $actionContainer.find('[data-task="createMail"]').html(ACYM_JS_TXT.ACYM_EDIT_MAIL);
        jQuery('.reveal').foundation('close');
        acym_helperModal.setResetMail();
      });
    });
  },
  setSearchValueStartFrom: function setSearchValueStartFrom() {
    var typingTimer = null;
    jQuery('input[name="mailchoose_search__ajax"]').off('keydown').on('keydown', function (event) {
      var searchList = jQuery(this);
      var searchValue = searchList.val();

      if ((searchValue || event.which == 8) && searchValue != '' && searchValue.length >= 2) {
        clearTimeout(typingTimer);
        typingTimer = setTimeout(function () {
          jQuery('#acym_search_template_choose__ajax').attr('value', searchValue);
          acym_helperModal.setAjaxAndResetPaginationStartFrom();
        }, 1500);
      }

      if (event.which == 13) {
        event.preventDefault();
        clearTimeout(typingTimer);
        jQuery('#acym_search_template_choose__ajax').attr('value', searchValue);
        acym_helperModal.setAjaxAndResetPaginationStartFrom();
        return false;
      }

      if (event.which == 8 && searchList.val() == '') {
        clearTimeout(typingTimer);
        jQuery('#acym_search_template_choose__ajax').attr('value', '');
        acym_helperModal.setAjaxAndResetPaginationStartFrom();
      }
    });
    jQuery('#acym__template__choose__modal .acym__search__button').off('click').on('click', function (e) {
      e.preventDefault();
      clearTimeout(typingTimer);
      jQuery('#acym_search_template_choose__ajax').attr('value', jQuery('input[name="mailchoose_search__ajax"]').attr('value'));
      acym_helperModal.setAjaxAndResetPaginationStartFrom();
    });
  },
  setAjaxAndResetPaginationStartFrom: function setAjaxAndResetPaginationStartFrom() {
    jQuery('#acym_pagination__ajax').attr('value', 1);
    acym_helperModal.setAjaxCallStartFrom();
  },
  setSelectTagStartFrom: function setSelectTagStartFrom() {
    jQuery('#mailchoose_tag__ajax').on('change', function (e) {
      jQuery('#acym_tag_template_choose__ajax').attr('value', jQuery(this).attr('value'));
      acym_helperModal.setAjaxAndResetPaginationStartFrom();
    });
  },
  setChoosenTypeStartFrom: function setChoosenTypeStartFrom() {
    jQuery('#acym__template__choose__modal .acym__type__choosen').off('click').on('click', function (e) {
      jQuery('[id^="acym__type-template"]').val(jQuery(this).attr('data-type'));
      jQuery('.acym__type__choosen').removeClass('is-active');
      jQuery(this).addClass('is-active').blur();
      acym_helperModal.setAjaxAndResetPaginationStartFrom();
    });
  },
  setTemplateModal: function setTemplateModal(inAutomation) {
    inAutomation = inAutomation !== undefined;
    acym_helperModal.setAjaxAndResetPaginationStartFrom();
    acym_helperModal.setPaginationAjaxStartFrom();
    if (acym_helperModal.isMultilingualEdition) acym_editorWysidMultilingual.setClickStartFromTemplate();
    acym_helperModal.setClearButtonStartFrom();

    if (inAutomation) {
      jQuery('[data-open="acym__template__choose__modal"]').on('click', function () {
        jQuery('#acym__template__choose__modal').attr('data-button', jQuery(this).attr('data-modal-name'));
      });
    }
  },
  setClearButtonStartFrom: function setClearButtonStartFrom() {
    jQuery('.modal__pagination__search .acym__search-clear').off('click').on('click', function () {
      jQuery('input[name="mailchoose_search__ajax"]').val('');
      jQuery('#acym_search_template_choose__ajax').val('');
      acym_helperModal.setAjaxAndResetPaginationStartFrom();
    });
  },
  setPopupIframeToggleGlobal: function setPopupIframeToggleGlobal() {
    jQuery('[data-iframe]').on('click', function () {
      var $popup = jQuery('#' + jQuery(this).attr('data-open'));
      var $reload = jQuery(this).attr('data-reload');
      var ajax = jQuery(this).attr('data-ajax');
      var classIframe = jQuery(this).attr('data-iframe-class');
      var urlIframe = ajax == 'true' ? ACYM_AJAX_URL + jQuery(this).attr('data-iframe') : jQuery(this).attr('data-iframe');
      $popup.prepend('<iframe src="' + urlIframe + '"></iframe>');

      if (classIframe !== undefined) {
        $popup.find('iframe').addClass(classIframe);
      }

      $popup.find('iframe').on('load', function () {
        jQuery(this).contents().find('#wpadminbar').remove();
      });
      $popup.find('.close-button').on('click', function () {
        jQuery(this).siblings('iframe').remove();

        if ($reload) {
          location.reload();
        }
      });
      jQuery('.reveal-overlay').on('click', function () {
        $popup.find('iframe').remove();

        if ($reload) {
          location.reload();
        }
      });
    });
  },
  setShowSelectedOrShowAllListsModalPaginationLists: function setShowSelectedOrShowAllListsModalPaginationLists() {
    var buttonShowSelected = jQuery('.modal__pagination__show-selected');
    var buttonShowAll = jQuery('.modal__pagination__show-all');

    if (buttonShowSelected.hasClass('selected')) {
      buttonShowAll.hide();
      buttonShowSelected.show();
    } else {
      buttonShowAll.show();
      buttonShowSelected.hide();
    }

    jQuery('.modal__pagination__show-button').off('click').on('click', function () {
      if (buttonShowSelected.hasClass('selected')) {
        buttonShowAll.show();
        buttonShowSelected.hide().removeClass('selected');
        jQuery('#modal__pagination__show-information').attr('value', 'true');
        jQuery('#acym_pagination__ajax').attr('value', 1);
      } else {
        buttonShowAll.hide();
        buttonShowSelected.show().addClass('selected');
        jQuery('#modal__pagination__show-information').attr('value', 'false');
        jQuery('#acym_pagination__ajax').attr('value', 1);
      }

      acym_helperModal.getContentAjaxModalPaginationLists();
    });
  },
  getContentAjaxModalPaginationLists: function getContentAjaxModalPaginationLists() {
    var ajaxURL = ACYM_AJAX_URL + '&page=acymailing_lists&ctrl=' + acym_helper.ctrlLists + '&action=acymailing_router&noheader=1&task=setAjaxListing&listsPerPage=10';
    ajaxURL += '&pagination_page_ajax=' + jQuery('#acym_pagination__ajax').val();
    ajaxURL += '&selectedLists=' + jQuery('#acym__modal__lists-selected').val();
    ajaxURL += '&alreadyLists=' + jQuery('#acym__user__lists_already_add').val();
    ajaxURL += '&show_selected=' + jQuery('#modal__pagination__show-information').val();
    ajaxURL += '&search_lists=' + jQuery('#modal__pagination__search__lists').val();
    ajaxURL += jQuery('#modal__pagination__need__display__sub').length > 0 ? '&needDisplaySub=1&nonActive=1' : '&needDisplaySub=0&nonActive=0';
    var container = jQuery('.modal__pagination__listing__lists__in-form');

    if (container.length) {
      jQuery.get(ajaxURL, function (response) {
        jQuery('#modal__pagination__search__spinner').hide();
        container.html(response);
        acym_helperModal.setAjaxPaginationModalPagination();
        acym_helperModal.setListingAjaxUserModalPaginationLists();
        acym_helperModal.setShowSelectedOrShowAllListsModalPaginationLists();
        acym_helperModal.setSearchListModalPaginationLists();
      });
    }
  },
  setAjaxPaginationModalPagination: function setAjaxPaginationModalPagination() {
    jQuery('.acym__pagination__page__ajax').off('click').on('click', function () {
      jQuery('#acym_pagination__ajax').val(jQuery(this).attr('page'));
      acym_helperModal.getContentAjaxModalPaginationLists();
    });
  },
  setListingAjaxUserModalPaginationLists: function setListingAjaxUserModalPaginationLists() {
    jQuery('.modal__pagination__listing__lists__list--checkbox').off('change').on('change', function () {
      var spanName = jQuery(this).next().children('label .modal__pagination__listing__lists__list-name ');
      var inputListsSelected = jQuery('#acym__modal__lists-selected');
      var listsSelectedToInject = inputListsSelected.val();
      var listsSelected = [];
      listsSelectedToInject === '' ? listsSelectedToInject = [] : listsSelectedToInject = JSON.parse(listsSelectedToInject);

      if (jQuery(this).is(':checked')) {
        spanName.addClass('acym__color__blue');
      } else {
        spanName.removeClass('acym__color__blue');
        listsSelectedToInject.splice(listsSelectedToInject.indexOf(jQuery(this).val()), 1);
      }

      jQuery('.modal__pagination__listing__lists__list--checkbox:checked').each(function () {
        listsSelected.push(parseInt(jQuery(this).val()));
      });
      jQuery.each(listsSelected, function (index) {
        jQuery.inArray(listsSelected[index], listsSelectedToInject) == -1 ? listsSelectedToInject.push(listsSelected[index]) : true;
      });
      inputListsSelected.val(JSON.stringify(listsSelectedToInject));
      jQuery('#acym__campaigns__recipients__event_on_change_count_recipients').trigger('change');
      jQuery('#acym__popup__subscription__change').trigger('change');
    });
  },
  setSearchListModalPaginationLists: function setSearchListModalPaginationLists() {
    var typingTimer = null;
    var $inputSearch = jQuery('input[name="modal_search_lists"]');
    var $modalShowSelected = jQuery('.modal__pagination__show');
    var $listsSearchInput = jQuery('#modal__pagination__search__lists');
    $inputSearch.off('keydown').on('keydown', function (e) {
      if (e.which == 13) {
        e.preventDefault();
        acym_helperModal.setSearchLists(typingTimer);
      }
    });
    $inputSearch.off('keyup').on('keyup', function (event) {
      var searchList = jQuery(this);
      var searchValue = searchList.val();

      if ((searchValue || event.which == 8) && searchValue != '' && searchValue.length >= 2) {
        jQuery('#modal__pagination__search__spinner').show();
        $modalShowSelected.hide();
        clearTimeout(typingTimer);
        typingTimer = setTimeout(function () {
          $listsSearchInput.attr('value', searchValue);
          jQuery('#acym_pagination__ajax').attr('value', 1);
          acym_helperModal.getContentAjaxModalPaginationLists();
        }, 1000);
      } else {
        clearTimeout(typingTimer);
      }

      if (searchList.val() == '') {
        clearTimeout(typingTimer);
        $modalShowSelected.show();
        $listsSearchInput.attr('value', '');
        jQuery('#acym_pagination__ajax').attr('value', 1);
        acym_helperModal.getContentAjaxModalPaginationLists();
      }
    });
    jQuery('.modal__pagination__search .acym__search__button').off('click').on('click', function (e) {
      e.preventDefault();
      acym_helperModal.setSearchLists(typingTimer);
    });
    jQuery('.modal__pagination__search .acym__search-clear').off('click').on('click', function (e) {
      e.preventDefault();
      clearTimeout(typingTimer);
      $listsSearchInput.attr('value', '');
      $inputSearch.attr('value', '');
      $modalShowSelected.show();
      acym_helperModal.getContentAjaxModalPaginationLists();
    });
  },
  setShowSelectedOrShowAllUsersModalPaginationUsers: function setShowSelectedOrShowAllUsersModalPaginationUsers() {
    var buttonShowSelected = jQuery('.modal__pagination__users__show-selected');
    var buttonShowAll = jQuery('.modal__pagination__users__show-all');

    if (buttonShowSelected.hasClass('selected')) {
      buttonShowAll.hide();
      buttonShowSelected.show();
    } else {
      buttonShowAll.show();
      buttonShowSelected.hide();
    }

    jQuery('.modal__pagination__users__show-button').off('click').on('click', function () {
      if (buttonShowSelected.hasClass('selected')) {
        buttonShowAll.show();
        buttonShowSelected.hide().removeClass('selected');
        jQuery('#modal__pagination__users__show-information').attr('value', 'true');
        jQuery('#acym_pagination__ajax').attr('value', 1);
      } else {
        buttonShowAll.hide();
        buttonShowSelected.show().addClass('selected');
        jQuery('#modal__pagination__users__show-information').attr('value', 'false');
        jQuery('#acym_pagination__ajax').attr('value', 1);
      }
    });
  },
  setSearchUserModalPaginationUsers: function setSearchUserModalPaginationUsers() {
    var typingTimer = null;
    var $inputSearch = jQuery('input[name="modal_search_users"]');
    var $modalShowSelected = jQuery('.modal__pagination__show');
    var $userSearchInput = jQuery('#modal__pagination__users__search__input');
    $inputSearch.off('keydown').on('keydown', function (e) {
      if (e.which == 13) {
        e.preventDefault();
        acym_helperModal.setSearchUsers(typingTimer);
      }
    });
    $inputSearch.off('keyup').on('keyup', function (event) {
      var searchValue = jQuery(this).val();

      if ((searchValue || event.which == 8) && searchValue != '' && searchValue.length >= 2) {
        jQuery('#modal__pagination__users__search__spinner').show();
        $modalShowSelected.hide();
        clearTimeout(typingTimer);
        typingTimer = setTimeout(function () {
          $userSearchInput.attr('value', searchValue);
          jQuery('#acym_pagination__ajax').attr('value', 1);
        }, 1000);
      } else {
        clearTimeout(typingTimer);
      }

      if (searchValue == '') {
        clearTimeout(typingTimer);
        $modalShowSelected.show();
        $userSearchInput.attr('value', '');
        jQuery('#acym_pagination__ajax').attr('value', 1);
      }
    });
    jQuery('.modal__pagination__users__search .acym__search__button').off('click').on('click', function (e) {
      e.preventDefault();
      acym_helperModal.setSearchUsers(typingTimer);
    });
    jQuery('.modal__pagination__users__search .acym__search-clear').off('click').on('click', function (e) {
      e.preventDefault();
      clearTimeout(typingTimer);
      $userSearchInput.attr('value', '');
      $inputSearch.attr('value', '');
      $modalShowSelected.show();
    });
  },
  setSearchUsers: function setSearchUsers(typingTimer) {
    clearTimeout(typingTimer);
    jQuery('.modal__pagination__show').hide();
    jQuery('#acym_pagination__ajax').attr('value', 1);
    jQuery('#modal__pagination__users__search__input').attr('value', jQuery('input[name="modal_search_users"]').attr('value'));
  },
  setSearchLists: function setSearchLists(typingTimer) {
    clearTimeout(typingTimer);
    jQuery('.modal__pagination__show').hide();
    jQuery('#acym_pagination__ajax').attr('value', 1);
    jQuery('#modal__pagination__search__lists').attr('value', jQuery('input[name="modal_search_lists"]').attr('value'));
    acym_helperModal.getContentAjaxModalPaginationLists();
  },
  setButtonModalPaginationLists: function setButtonModalPaginationLists() {
    jQuery('.modal__pagination__button-open').off('click').on('click', function () {
      acym_helperModal.getContentAjaxModalPaginationLists();
    });
  },
  setButtonModalPaginationUsers: function setButtonModalPaginationUsers() {
    jQuery('.modal__pagination__users__button-open').off('click').on('click', function () {
      jQuery('#acym__modal__users-selected').val('');
    });
  },
  setButtonConfirmModalPaginationUsers: function setButtonConfirmModalPaginationUsers() {
    jQuery('#modal__pagination__users__confirm').off('click').on('click', function () {
      var $task = jQuery('#acym__modal__users__form-task').val();
      jQuery('input[name="task"]').val($task);
      jQuery('#acym_form').submit();
    });
  }
};
var acym_helperPagination = {
  setPaginationGlobal: function setPaginationGlobal() {
    jQuery('.acym__pagination__page').off('click').on('click', function () {
      jQuery('#acym_pagination').val(jQuery(this).attr('page'));
      jQuery('#acym_form').submit();
    });
    jQuery('.acym__lists__filter__tags').off('change').on('change', function () {
      jQuery('#select2-lists_tag-container').html(jQuery(this).find('option:selected').text());
      jQuery('#acym_pagination').val(1);
    });
    jQuery('.acym__templates__filter__tags').off('change').on('change', function () {
      jQuery('#select2-mails_tag-container').html(jQuery(this).find('option:selected').text());
      jQuery('#acym_pagination').val(1);
    });
    jQuery('.acym__choose_template__filter__tags').on('change', function () {
      jQuery('#acym_pagination').val(1);
      jQuery('#acym_form').submit();
    });
    jQuery('.acym__campaigns__filter__tags').off('change').on('change', function () {
      jQuery('#select2-campaigns_tag-container').html(jQuery(this).find('option:selected').text());
      jQuery('#acym_pagination').val(1);
    });
    jQuery('.acym__type__choosen').off('click').on('click', function () {
      jQuery('[id^="acym__type-template"]').val(jQuery(this).attr('data-type'));
      jQuery('.acym_ordering_option').removeClass('is-active');
      jQuery(this).addClass('is-active');
      acym_helperPagination.initPagination();
    });
    jQuery('.acym__filter__status').off('click').on('click', function () {
      jQuery('#acym_filter_status').val(jQuery(this).attr('status'));
      acym_helperPagination.initPagination();
    });

    if (ACYM_IS_ADMIN) {
      jQuery('.acym__select__pagination__dropdown').select2({
        theme: 'foundation',
        width: '60px'
      });
    }

    jQuery('#acym_pagination_element_per_page').on('change', function () {
      jQuery('#formSubmit').click();
    });
  },
  initPagination: function initPagination() {
    jQuery('#acym_pagination').val(1);
    jQuery('#acym_form').submit();
  }
};
var acym_helperPreview = {
  setPreviewIframe: function setPreviewIframe() {
    //On saving the wysid editor the preview is reloaded.
    jQuery('.acym__wysid__hidden__save__content').off('change').on('change', function () {
      acym_helperPreview.setPreviewIframe();
    });
    acym_helperPreview.addIframePreview('acym__wysid__email__preview', 'desktop'); //Add preview buttons for the WYSID editor

    jQuery('#acym__wysid__view__desktop').off('click').on('click', function () {
      tinymce.remove();
      acym_helperPreview.setTemplateForPreview(true);
    });
    jQuery('#acym__wysid__view__smartphone').off('click').on('click', function () {
      tinymce.remove();
      acym_helperPreview.setTemplateForPreview(false);
    });
  },
  addIframePreview: function addIframePreview(where, device, onEditor) {
    onEditor == undefined ? onEditor = false : onEditor = true;
    var collapse = true;
    var heightIframe;
    var $divIframe = jQuery('#acym__wysid__email__preview');
    var idIframe = 'acym__wysid__preview__iframe__' + where; //Add the iframe

    var newContent = '<div class="cell auto"></div>';
    newContent += '<iframe id="' + idIframe + '" src="about:blank" frameborder="0" class="cell shrink" style="width: 100%"></iframe>';
    newContent += '<div class="cell auto"></div>';
    newContent += '<div class="acym__fadeout"></div>';
    newContent += '<i class="acymicon-keyboard_arrow_down acym__preview__extend acym__preview__toggle acym__preview-toggle"></i>';
    newContent += '<i class="acymicon-sort acym__preview-toggle acym__preview__toggle__top"></i>';
    jQuery('#' + where).html(newContent);
    var $iframe = jQuery('#' + idIframe); //Sets the resolution according to the selected device

    device == 'smartphone' ? $iframe.css('maxWidth', '425px') : $iframe.css('maxWidth', 'inherit');
    $iframe.css('height', '100%');
    heightIframe = $iframe.css('height');
    var heightForce = '200px';

    if (jQuery('#acym__campaign__summary').length) {
      $iframe.css({
        'height': heightForce
      });
      $divIframe.css('padding-bottom', heightForce);
      $iframe.contents().find('body').css('overflow', 'hidden');
      jQuery('.acym__preview-toggle').off('click').on('click', function () {
        jQuery('.acym__fadeout').toggle();

        if (collapse) {
          jQuery('.acym__preview__toggle').removeClass('acymicon-keyboard_arrow_down').removeClass('acym__preview__extend').addClass('acymicon-keyboard_arrow_up').addClass('acym__preview__collapse');
          $iframe.css({
            'height': heightIframe
          }).contents().find('body').css('overflow', 'auto');
          $divIframe.css('padding-bottom', heightIframe);
          collapse = !collapse;
        } else {
          jQuery('.acym__preview__toggle').removeClass('acymicon-keyboard_arrow_up').removeClass('acym__preview__collapse').addClass('acymicon-keyboard_arrow_down').addClass('acym__preview__extend');
          $iframe.css({
            'height': heightForce
          }).contents().find('body').css('overflow', 'hidden');
          $divIframe.css('padding-bottom', heightForce);
          collapse = !collapse;
        }
      });
    } else {
      jQuery('.acym__fadeout').hide();
      jQuery('.acym__preview-toggle').hide();
    } //If chrome we load the iframe synchronously, yeah it's a fix for chrome


    if (/chrom(e|ium)/.test(navigator.userAgent.toLowerCase()) || /^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      acym_helperPreview.loadIframe(idIframe, onEditor);
    } else {
      $iframe.on('load', function () {
        acym_helperPreview.loadIframe(idIframe, onEditor);
      });
    }
  },
  setTemplateForPreview: function setTemplateForPreview(large) {
    var $template = jQuery('#acym__wysid__template');
    var device = large ? 'desktop' : 'smartphone';
    $template.find('.acym__wysid__row__selector').remove();
    jQuery('#acym__template__preview').val($template.html());
    jQuery('.acym__wysid__fullscreen__modal__content__container').hide();
    jQuery('#acym__wysid__fullscreen__modal__content__' + device).closest('.acym__wysid__fullscreen__modal__content__container').show();
    acym_helperPreview.addIframePreview('acym__wysid__fullscreen__modal__content__' + device, device, true);
    jQuery('#acym__wysid__fullscreen__modal').css('display', 'flex').on('click', function () {
      acym_helperEditorWysid.setColumnRefreshUiWYSID();
      jQuery(this).css('display', 'none');
    });
  },
  loadIframe: function loadIframe(idIframe, onEditor) {
    var defaultContentWYSID = '<div id="acym__wysid__template" class="cell acym__foundation__for__email">';
    defaultContentWYSID += '<table class="body"><tbody><tr>';
    defaultContentWYSID += '<td align="center" class="center acym__wysid__template__content" valign="top" style="background-color: rgb(239, 239, 239);"><center>';
    defaultContentWYSID += '<table align="center" border="0" cellpadding="0" cellspacing="0"><tbody>';
    defaultContentWYSID += '<tr><td class="acym__wysid__row ui-droppable ui-sortable">';
    defaultContentWYSID += '<table class="row acym__wysid__row__element" border="0" cellpadding="0" cellspacing="0"><tbody style="background-color: transparent;">';
    defaultContentWYSID += '<tr><th class="small-12 medium-12 large-12 columns">';
    defaultContentWYSID += '<table class="acym__wysid__column" style="min-height: 75px; display: block;" border="0" cellpadding="0" cellspacing="0"><tbody class="ui-sortable" style="min-height: 75px; display: block;"></tbody></table>';
    defaultContentWYSID += '</th></tr>';
    defaultContentWYSID += '</tbody></table>';
    defaultContentWYSID += '</td></tr>';
    defaultContentWYSID += '</tbody></table>';
    defaultContentWYSID += '</center></td>';
    defaultContentWYSID += '</tr></tbody></table>';
    defaultContentWYSID += '</div>';
    var $iframeContents = jQuery('#' + idIframe).contents();
    var $iframeHead = $iframeContents.find('head');
    var $iframeBody = $iframeContents.find('body');
    var $savedStylesheet = jQuery('.acym__wysid__hidden__save__stylesheet').attr('value'); // Content of the wysid edition page when we click the "Apply" button

    var $savedContent = jQuery('.acym__wysid__hidden__save__content'); // Content of the wysid edition page on load

    var $mailContent = jQuery('.acym__hidden__mail__content').val();
    var $editorContent = jQuery('#acym__wysid__template');
    var defaultContent = $editorContent.find('#acym__wysid__default').detach();
    $editorContent.find('.acym__wysid__row__selector, .acym__wysid__element__toolbox').remove();
    var $templateHtml = $editorContent.html();
    $editorContent.find('.acym__wysid__column__first').before(defaultContent);
    $iframeHead.append('<meta name="viewport" content="width=device-width, initial-scale=1.0" />'); // Apply the CSS

    $iframeHead.append('<link rel="stylesheet" href="' + FOUNDATION_FOR_EMAIL + '">');
    $iframeHead.append('<style>' + ACYM_FIXES_FOR_EMAIL + '</style>');

    if ($savedStylesheet != undefined && $savedStylesheet != '') {
      setTimeout(function () {
        $iframeHead.append('<style>' + $savedStylesheet + '</style>');
      }, 100);
    } // Add current template content


    var $previewContent = '';

    if (onEditor) {
      $savedContent.attr('value', '<div id="acym__wysid__template" class="cell">' + $templateHtml + '</div>');
      $previewContent = '<div id="acym__wysid__template" class="cell">' + jQuery('#acym__template__preview').val() + '</div>';
    } else if ($savedContent.attr('value') == '') {
      if ($templateHtml == '') {
        $savedContent.attr('value', defaultContentWYSID);
      } else {
        $savedContent.attr('value', '<div id="acym__wysid__template" class="cell">' + $templateHtml + '</div>');
      }
    }

    if ($savedContent.attr('value') == 'empty') {
      $savedContent.attr('value', defaultContentWYSID);
    } // Set content and user stylesheet for summary preview


    if ($mailContent != '') {
      var $mailStylesheet = jQuery('.acym__hidden__mail__stylesheet').html();

      if ($mailStylesheet != undefined && $mailStylesheet != '') {
        $iframeHead.append('<style>' + $mailStylesheet + '</style>');
      }

      $iframeBody.html('');
      $iframeBody.append($mailContent);
    }

    if ($previewContent != undefined && $previewContent != '') {
      $iframeBody.css('margin', '0').append($previewContent);
    } else {
      $iframeBody.css('margin', '0').append($savedContent.attr('value'));
    } // Add blank target to 'a' tags except anchors


    $iframeContents.find('a').attr('target', '_blank');
    $iframeContents.find('a[href^="#"]').attr('target', '_top');
    jQuery(document).trigger('acy_preview_loaded');
  }
};
var acym_helperSearch = {
  setClearSearch: function setClearSearch() {
    jQuery('.acym__search-clear').off('click').on('click', function () {
      jQuery('.acym__search-field').attr('value', '');
      acym_helperPagination.initPagination();
    });
  }
};
var acym_helperSegments = {
  beforeSave: function beforeSave() {
    var canSubmit = jQuery('[name^=acym_action]').length > 0;
    if (!canSubmit) acym_helperNotification.addNotification(ACYM_JS_TXT.ACYM_PLEASE_SELECT_FILTERS, 'error', true);
    return canSubmit;
  }
};
var acym_helperSelectionMultilingual = {
  mainLanguage: '',
  currentLanguage: '',
  translation: {},
  defaultTranslation: {},
  $translationInput: '',
  mainParams: {},
  init: function init(type) {
    this.currentLanguage = this.mainLanguage = jQuery('#acym__multilingual__selection__main-language').val();
    this.$translationInput = jQuery('#acym__multilingual__selection__translation');
    this.$defaultTranslationInput = jQuery('#acym__multilingual__selection__translation__default');
    this.translation = acym_helper.empty(this.$translationInput.val()) ? {} : acym_helper.parseJson(this.$translationInput.val());
    this.defaultTranslation = acym_helper.empty(this.$defaultTranslationInput.val()) ? {} : acym_helper.parseJson(this.$defaultTranslationInput.val());
    if (JSON.stringify(this.translation) === '[]') this.translation = {}; //We set the main language params

    if (typeof acym_helperSelectionMultilingual["setMainParams_".concat(type)] === 'function') {
      acym_helperSelectionMultilingual["setMainParams_".concat(type)]();
    } //We set the field to listen


    if (typeof acym_helperSelectionMultilingual["updateTranslation_".concat(type)] === 'function') {
      acym_helperSelectionMultilingual["updateTranslation_".concat(type)]();
    } //We set the selection


    jQuery('.acym__multilingual__selection__one').off('click').on('click', function () {
      if (jQuery(this).hasClass('acym__multilingual__selection__one__selected')) return;
      var code = jQuery(this).attr('data-acym-code');
      if (acym_helper.empty(code)) return;
      jQuery('.acym__multilingual__selection__one').removeClass('acym__multilingual__selection__one__selected');
      jQuery(this).addClass('acym__multilingual__selection__one__selected');

      if (typeof acym_helperSelectionMultilingual["changeLanguage_".concat(type)] === 'function') {
        acym_helperSelectionMultilingual.currentLanguage = code;
        acym_helperSelectionMultilingual["changeLanguage_".concat(type)](code);
      }
    });
  },
  changeLanguage_list: function changeLanguage_list(code) {
    if (this.translation[this.currentLanguage] === undefined && code !== this.mainLanguage) {
      this.translation[this.currentLanguage] = {
        name: '',
        description: ''
      };
    }

    var name = code === this.mainLanguage ? this.mainParams.name : this.translation[this.currentLanguage].name;
    var description = code === this.mainLanguage ? this.mainParams.description : this.translation[this.currentLanguage].description;
    jQuery('[name="list[name]"]').val(name);
    jQuery('[name="list[description]"]').val(description);
  },
  updateTranslation_list: function updateTranslation_list() {
    jQuery('[name="list[name]"], [name="list[description]"]').off('keyup').on('keyup', function () {
      var mainLanguage = acym_helperSelectionMultilingual.mainLanguage === acym_helperSelectionMultilingual.currentLanguage;
      var column = jQuery(this).attr('name') === 'list[name]' ? 'name' : 'description';

      if (mainLanguage) {
        acym_helperSelectionMultilingual.mainParams[column] = jQuery(this).val();
      } else {
        acym_helperSelectionMultilingual.translation[acym_helperSelectionMultilingual.currentLanguage][column] = jQuery(this).val();
        acym_helperSelectionMultilingual.$translationInput.val(JSON.stringify(acym_helperSelectionMultilingual.translation));
      }
    });
  },
  setMainParams_list: function setMainParams_list() {
    this.mainParams.name = jQuery('[name="list[name]"]').val();
    this.mainParams.description = jQuery('[name="list[description]"]').val();
  },
  setMainParams_field: function setMainParams_field() {
    this.mainParams.name = jQuery('[name="field[name]"]').val();
  },
  updateTranslation_field: function updateTranslation_field() {
    jQuery('[name="field[name]"]').off('keyup').on('keyup', function () {
      var mainLanguage = acym_helperSelectionMultilingual.mainLanguage === acym_helperSelectionMultilingual.currentLanguage;

      if (mainLanguage) {
        acym_helperSelectionMultilingual.mainParams['name'] = jQuery(this).val();
      } else {
        acym_helperSelectionMultilingual.translation[acym_helperSelectionMultilingual.currentLanguage]['name'] = jQuery(this).val();
        acym_helperSelectionMultilingual.$translationInput.val(JSON.stringify(acym_helperSelectionMultilingual.translation));
      }
    });
  },
  changeLanguage_field: function changeLanguage_field(code) {
    if (this.translation[this.currentLanguage] === undefined && code !== this.mainLanguage) this.translation[this.currentLanguage] = {
      name: ''
    };
    var name = code === this.mainLanguage ? this.mainParams.name : this.translation[this.currentLanguage].name;
    jQuery('[name="field[name]"]').val(name);
  },
  setMainParams_campaign: function setMainParams_campaign() {
    var $fromName = jQuery('[name="senderInformation[from_name]"]');
    var $fromEmail = jQuery('[name="senderInformation[from_email]"]');
    var $replyToName = jQuery('[name="senderInformation[reply_to_name]"]');
    var $replyToEmail = jQuery('[name="senderInformation[reply_to_email]"]');
    this.mainParams.from_name = $fromName.val();
    this.mainParams.from_email = $fromEmail.val();
    this.mainParams.reply_to_name = $replyToName.val();
    this.mainParams.reply_to_email = $replyToEmail.val();
    this.defaultTranslation[this.mainLanguage] = {
      from_name: $fromName.attr('placeholder'),
      from_email: $fromEmail.attr('placeholder'),
      reply_to_name: $replyToName.attr('placeholder'),
      reply_to_email: $replyToEmail.attr('placeholder')
    };
  },
  updateTranslation_campaign: function updateTranslation_campaign() {
    jQuery('[name="senderInformation[from_name]"], [name="senderInformation[from_email]"], [name="senderInformation[reply_to_name]"], [name="senderInformation[reply_to_email]"]').off('keyup').on('keyup', function () {
      var mainLanguage = acym_helperSelectionMultilingual.mainLanguage === acym_helperSelectionMultilingual.currentLanguage;
      var column = 'from_name';

      if (jQuery(this).attr('name') === 'senderInformation[from_email]') {
        column = 'from_email';
      } else if (jQuery(this).attr('name') === 'senderInformation[reply_to_name]') {
        column = 'reply_to_name';
      } else if (jQuery(this).attr('name') === 'senderInformation[reply_to_email]') {
        column = 'reply_to_email';
      }

      if (mainLanguage) {
        acym_helperSelectionMultilingual.mainParams[column] = jQuery(this).val();
      } else {
        acym_helperSelectionMultilingual.translation[acym_helperSelectionMultilingual.currentLanguage][column] = jQuery(this).val();
        acym_helperSelectionMultilingual.$translationInput.val(JSON.stringify(acym_helperSelectionMultilingual.translation));
      }
    });
  },
  changeLanguage_campaign: function changeLanguage_campaign(code) {
    if (this.translation[this.currentLanguage] === undefined && code !== this.mainLanguage) {
      this.translation[this.currentLanguage] = {
        from_name: '',
        from_email: '',
        reply_to_name: '',
        reply_to_email: ''
      };
    }

    var from_name = code === this.mainLanguage ? this.mainParams.from_name : this.translation[this.currentLanguage].from_name;
    var from_email = code === this.mainLanguage ? this.mainParams.from_email : this.translation[this.currentLanguage].from_email;
    var reply_to_name = code === this.mainLanguage ? this.mainParams.reply_to_name : this.translation[this.currentLanguage].reply_to_name;
    var reply_to_email = code === this.mainLanguage ? this.mainParams.reply_to_email : this.translation[this.currentLanguage].reply_to_email;
    var $fromName = jQuery('[name="senderInformation[from_name]"]');
    var $fromEmail = jQuery('[name="senderInformation[from_email]"]');
    var $replyToName = jQuery('[name="senderInformation[reply_to_name]"]');
    var $replyToEmail = jQuery('[name="senderInformation[reply_to_email]"]');
    $fromName.val(from_name);
    $fromEmail.val(from_email);
    $replyToName.val(reply_to_name);
    $replyToEmail.val(reply_to_email);

    if (!acym_helper.empty(this.defaultTranslation[this.currentLanguage])) {
      var defaultText = ACYM_JS_TXT.ACYM_DEFAULT + ': ';

      if (this.defaultTranslation[this.currentLanguage].from_name !== undefined) {
        $fromName.attr('placeholder', defaultText + this.defaultTranslation[this.currentLanguage].from_name);
      }

      if (this.defaultTranslation[this.currentLanguage].from_email !== undefined) {
        $fromEmail.attr('placeholder', defaultText + this.defaultTranslation[this.currentLanguage].from_email);
      }

      if (this.defaultTranslation[this.currentLanguage].reply_to_name !== undefined) {
        $replyToName.attr('placeholder', defaultText + this.defaultTranslation[this.currentLanguage].reply_to_name);
      }

      if (this.defaultTranslation[this.currentLanguage].reply_to_email !== undefined) {
        $replyToEmail.attr('placeholder', defaultText + this.defaultTranslation[this.currentLanguage].reply_to_email);
      }
    }
  },
  setMainParams_configuration: function setMainParams_configuration() {
    this.mainParams.from_name = jQuery('[name="config[from_name]"]').val();
    this.mainParams.from_email = jQuery('[name="config[from_email]"]').val();
    this.mainParams.replyto_name = jQuery('[name="config[replyto_name]"]').val();
    this.mainParams.replyto_email = jQuery('[name="config[replyto_email]"]').val();
  },
  updateTranslation_configuration: function updateTranslation_configuration() {
    jQuery('[name="config[from_name]"], [name="config[from_email]"], [name="config[replyto_name]"], [name="config[replyto_email]"]').off('keyup').on('keyup', function () {
      var sameReplyTo = jQuery('#from_as_replyto').is(':checked');
      var mainLanguage = acym_helperSelectionMultilingual.mainLanguage === acym_helperSelectionMultilingual.currentLanguage;
      var column = 'from_name';

      if (jQuery(this).attr('name') === 'config[from_email]') {
        column = 'from_email';
      } else if (jQuery(this).attr('name') === 'config[replyto_name]') {
        column = 'replyto_name';
      } else if (jQuery(this).attr('name') === 'config[replyto_email]') {
        column = 'replyto_email';
      }

      var otherColumn = '';

      if (mainLanguage) {
        acym_helperSelectionMultilingual.mainParams[column] = jQuery(this).val();

        if (sameReplyTo && column.indexOf('from') !== -1) {
          otherColumn = column.replace('from', 'replyto');
          acym_helperSelectionMultilingual.mainParams[otherColumn] = jQuery(this).val();
        }
      } else {
        acym_helperSelectionMultilingual.translation[acym_helperSelectionMultilingual.currentLanguage][column] = jQuery(this).val();

        if (sameReplyTo && column.indexOf('from') !== -1) {
          otherColumn = column.replace('from', 'replyto');
          acym_helperSelectionMultilingual.translation[acym_helperSelectionMultilingual.currentLanguage][otherColumn] = jQuery(this).val();
        }

        acym_helperSelectionMultilingual.$translationInput.val(JSON.stringify(acym_helperSelectionMultilingual.translation));
      }

      if (otherColumn !== '') {
        jQuery("[name=\"config[".concat(otherColumn, "]\"]")).val(jQuery(this).val());
      }
    });
    jQuery('#from_as_replyto').on('change', function () {
      if (!jQuery(this).is(':checked') || acym_helperSelectionMultilingual.currentLanguage === acym_helperSelectionMultilingual.mainLanguage) {
        return false;
      }

      jQuery('[name="config[replyto_name]"]').val(acym_helperSelectionMultilingual.translation[acym_helperSelectionMultilingual.currentLanguage].from_name);
      jQuery('[name="config[replyto_email]"]').val(acym_helperSelectionMultilingual.translation[acym_helperSelectionMultilingual.currentLanguage].from_email);
    });
  },
  changeLanguage_configuration: function changeLanguage_configuration(code) {
    if (this.translation[this.currentLanguage] === undefined && code !== this.mainLanguage) {
      this.translation[this.currentLanguage] = {
        from_name: '',
        from_email: '',
        replyto_name: '',
        replyto_email: ''
      };
    }

    var from_name = code === this.mainLanguage ? this.mainParams.from_name : this.translation[this.currentLanguage].from_name;
    var from_email = code === this.mainLanguage ? this.mainParams.from_email : this.translation[this.currentLanguage].from_email;
    var replyto_name = code === this.mainLanguage ? this.mainParams.replyto_name : this.translation[this.currentLanguage].replyto_name;
    var replyto_email = code === this.mainLanguage ? this.mainParams.replyto_email : this.translation[this.currentLanguage].replyto_email;
    jQuery('[name="config[from_name]"]').val(from_name);
    jQuery('[name="config[from_email]"]').val(from_email);
    jQuery('[name="config[replyto_name]"]').val(replyto_name);
    jQuery('[name="config[replyto_email]"]').val(replyto_email);
  }
};
var acym_helperSelectionPage = {
  initSelectionPage: function initSelectionPage() {
    if (jQuery('.acym__selection_disabled').length === 0) {
      this.setSelectionElement(false, false, undefined, '#acym__selection__button-select');
      this.setSelectionButton();
    }
  },
  setSelectionElement: function setSelectionElement() {
    var haveSettings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var configuration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
    var scrollElementSelector = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
    var $allCards = jQuery('.acym__selection__card:not(.acym__selection__card__disabled)');
    $allCards.off('click').on('click', function () {
      if (jQuery(this).hasClass('acym__selection__card-selected')) return;
      $allCards.removeClass('acym__selection__card-selected');
      jQuery(this).addClass('acym__selection__card-selected');
      if (haveSettings) acym_helperSelectionPage.setDisplaySettings(this);
      if (undefined !== callback) callback();

      if (undefined !== scrollElementSelector) {
        document.querySelector(scrollElementSelector).scrollIntoView({
          behavior: 'smooth',
          block: 'end'
        });
      }

      if (configuration) return;

      if (jQuery(this).hasClass('acym__selection__select-card') && jQuery(this).find('.acym__selection__select-card__select').val() !== '' || !jQuery(this).hasClass('acym__selection__select-card')) {
        jQuery('#acym__selection__button-select').removeAttr('disabled');
      } else {
        jQuery('#acym__selection__button-select').attr('disabled', 'true');
      }
    });
  },
  setSelectionButton: function setSelectionButton() {
    jQuery('#acym__selection__button-select').off('click').on('click', function () {
      var $cardSelected = jQuery('.acym__selection__card-selected');
      var link = $cardSelected.attr('acym-data-link');

      if (link.indexOf('{dataid}') !== -1) {
        var listId = $cardSelected.find('.acym__email__new__card__select').val();
        link = link.replace('{dataid}', listId);
      }

      window.location.href = link;
    });
  },
  setDisplaySettings: function setDisplaySettings(element) {
    var settings = document.getElementsByClassName('send_settings');
    var selectedSetting;

    var _iterator = _createForOfIteratorHelper(settings),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var setting = _step.value;
        if (setting.id === "".concat(element.id, "_settings")) selectedSetting = setting;
        setting.style.display = 'none';
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    if (undefined !== selectedSetting) selectedSetting.style.display = 'flex';
  }
};
var acym_helperSwitch = {
  setSwitchFieldsGlobal: function setSwitchFieldsGlobal() {
    jQuery('.switch-label').on('click', function () {
      if (jQuery(this).hasClass('disabled')) {
        return;
      }

      var input = jQuery('input[data-switch="' + jQuery(this).attr('for') + '"]');
      input.attr('value', 1 - input.attr('value'));
    });
  }
};
var acym_helperTab = {
  initTab: function initTab() {
    acym_helperTab.setTab();
    acym_helperTab.reloadRadioButtons();
  },
  setTab: function setTab() {
    jQuery('.acym_tab').off('click').on('click', function (e) {
      if (jQuery(this).attr('data-empty') == 'true') {
        return false;
      }

      if (jQuery(this).attr('data-dynamics')) {
        var mailId = jQuery('[name="mail_id"]').val();
        var mailType = jQuery('[name="mail_type"]').val();
        var typeNotif = jQuery('[name="type_notif"]').val();
        var ajaxUrl = ACYM_AJAX_URL + '&ctrl=' + acym_helper.ctrlDynamics + '&task=trigger&trigger=textPopup&plugin=' + jQuery(this).attr('data-dynamics') + '&id=' + mailId + '&mail_type=' + mailType + '&type_notif=' + typeNotif;
        jQuery.post(ajaxUrl, function (response) {
          jQuery('.tabs-panel.is-active').html(response);
          acym_helperTab.reloadRadioButtons();
        });
      }

      var tabsIdentifier = jQuery(this).closest('.tabs').attr('id');
      localStorage.setItem('acy' + tabsIdentifier, jQuery(this).attr('data-tab-identifier'));
      var clickedIdentifier = jQuery(this).attr('data-tab-identifier');
      jQuery('.acym__tabs__inbar__element').each(function () {
        var identifier = jQuery(this).attr('acym-data-identifier');

        if (identifier.length > 0) {
          if (identifier === clickedIdentifier) {
            jQuery(this).show();
          } else {
            jQuery(this).hide();
          }
        }
      });
    });
    var identifier = jQuery('.tabs').attr('id');
    var selectedTab = localStorage.getItem('acy' + identifier);
    var $lastSelected = jQuery('#' + identifier).find('a[data-tab-identifier="' + selectedTab + '"]');

    if ($lastSelected.length && !$lastSelected.closest('.tabs-title').hasClass('tabs-title-empty')) {
      $lastSelected.click();
    } else {
      var $tabs = jQuery('#' + identifier + ' .acym_tab');
      $tabs.each(function () {
        if (!jQuery(this).closest('.tabs-title').hasClass('tabs-title-empty')) {
          jQuery(this).click();
          return false;
        }
      });
    }
  },
  reloadRadioButtons: function reloadRadioButtons() {
    jQuery('i.acym_radio_unchecked').on('click', function () {
      var $radio = jQuery('#' + jQuery(this).attr('data-radio'));
      $radio.click();
    });
    jQuery('input[type="radio"]').on('change', function () {
      var $checked = jQuery('input[name="' + jQuery(this).attr('name') + '"]:checked').val();
      jQuery('input[name="' + jQuery(this).attr('name') + '"]').each(function () {
        if (jQuery(this).val() === $checked) {
          jQuery('i[data-radio="' + jQuery(this).attr('id') + '"].acym_radio_unchecked').hide();
          jQuery('i[data-radio="' + jQuery(this).attr('id') + '"].acym_radio_checked').show();
        } else {
          jQuery('i[data-radio="' + jQuery(this).attr('id') + '"].acym_radio_unchecked').show();
          jQuery('i[data-radio="' + jQuery(this).attr('id') + '"].acym_radio_checked').hide();
        }
      });
    }).change();
  }
};
var acym_helperThumbnail = {
  setAjaxSaveThumbnail: function setAjaxSaveThumbnail() {
    var $editorThumbnail = jQuery('#editor_thumbnail');
    var $savedThumbnail = jQuery('[name="thumbnail"]');
    var ajaxUrl = ACYM_AJAX_URL + '&ctrl=' + acym_helper.ctrlMails + '&task=setNewThumbnail';
    if ($editorThumbnail.val().indexOf('.png') !== -1) return true;

    if ($editorThumbnail.val() === '' && $savedThumbnail.val() !== '') {
      $editorThumbnail.val($savedThumbnail.val());
      return true;
    }

    if ($savedThumbnail.val() === '' && $editorThumbnail.val() === '') {
      return true;
    } else {
      var generatedThumbnail = $savedThumbnail.val();
      $savedThumbnail.val('');
      return jQuery.ajax({
        type: 'POST',
        url: ajaxUrl,
        data: {
          content: $editorThumbnail.val(),
          thumbnail: generatedThumbnail
        },
        timeout: 5000,
        success: function success(res) {
          $editorThumbnail.val(res);
        },
        error: function error(XMLHttpRequest, textStatus, errorThrown) {
          if (textStatus === 'timeout') errorThrown = ACYM_JS_TXT.ACYM_REQUEST_FAILED_TIMEOUT;
          acym_helperNotification.addNotification(acym_helper.sprintf(ACYM_JS_TXT.ACYM_COULD_NOT_SAVE_THUMBNAIL_ERROR_X, errorThrown), 'error');
          $editorThumbnail.val('');
        }
      });
    }
  }
};
var acym_helperToggle = {
  initJsToggle: function initJsToggle() {
    acym_helperToggle.setSwitchToggle();
    acym_helperToggle.setToggleArrow();
    acym_helperToggle.setToggleGlobal();
    acym_helperToggle.setToggleCheckboxesGlobal();
    acym_helperToggle.setSelectToggle();
  },
  setToggleGlobal: function setToggleGlobal() {
    jQuery('.acym_toggleable').off('click').on('click', function () {
      var element = jQuery(this);
      element.attr('class', 'acymicon-circle-o-notch acymicon-spin');
      var table = element.attr('data-acy-table');
      var field = element.attr('data-acy-field');
      var elementid = element.attr('data-acy-elementid');
      var newvalue = element.attr('data-acy-newvalue');
      var url = ACYM_TOGGLE_URL + '&table=' + table + '&field=' + field + '&id=' + elementid + '&value=' + newvalue;
      jQuery.ajax({
        url: url,
        type: 'GET'
      }).done(function (result) {
        var json = jQuery.parseJSON(result);
        var toggleElement = jQuery('[data-acy-table=' + table + '][data-acy-field=' + field + '][data-acy-elementid=' + elementid + ']');
        toggleElement.attr('data-acy-newvalue', json.value).attr('class', json.classes);

        if (typeof json.tooltip !== 'undefined') {
          toggleElement.closest('.acym__tooltip').find('.acym__tooltip__text').html(json.tooltip);
        }
      });
    });
    jQuery('.acym_toggle_delete').off('click').on('click', function () {
      var element = jQuery(this);
      var confirmation = element.attr('confirmation');

      if (!confirmation || acym_helper.confirm(ACYM_JS_TXT.ACYM_ARE_YOU_SURE)) {
        var table = element.attr('data-acy-table');
        var elementid = element.attr('data-acy-elementid');
        var url = ACYM_TOGGLE_URL + '&task=delete&table=' + table + '&id=' + elementid;
        var method = element.attr('data-acy-method');

        if (method !== undefined) {
          url += '&method=' + method;
        }

        jQuery.ajax({
          url: url,
          type: 'GET'
        }).done(function (result) {
          if ('mail' === table) {
            jQuery('#acym_form').submit();
          } else {
            jQuery('.grid-x[data-acy-elementid=' + elementid + ']').remove();
          }
        });
      }
    });
    jQuery('.switch-label').off('click').on('click', function () {
      var $id = jQuery(this).attr('for');
      jQuery('[data-switch="' + $id + '"]').trigger('change');
    });
    jQuery('.acym_toggle_switch').off('change').on('change', function () {
      var $element = jQuery(this);
      var $table = $element.attr('data-acy-table');
      var $field = $element.attr('data-acy-field');
      var $elementid = $element.attr('data-acy-elementid');
      var $newvalue = $element.attr('data-acy-newvalue');
      var url = ACYM_TOGGLE_URL + '&table=' + $table + '&field=' + $field + '&id=' + $elementid + '&value=' + $newvalue;
      jQuery.ajax({
        url: url,
        type: 'GET'
      }).done(function (result) {
        var json = jQuery.parseJSON(result);
        $element.attr('data-acy-newvalue', json.value);
      });
    });
  },
  setToggleCheckboxesGlobal: function setToggleCheckboxesGlobal() {
    var toggleCheckboxes = jQuery('input.acym_toggle[type="checkbox"]');
    toggleCheckboxes.off('change').on('change', function () {
      var toggleableElements = jQuery('.' + jQuery(this).attr('data-toggle'));
      var isChecked = jQuery(this).is(':checked');
      var valueField = jQuery('#' + jQuery(this).attr('data-value'));
      toggleableElements.each(function () {
        var $toggleableElement = jQuery(this);

        if (isChecked) {
          $toggleableElement.hide();

          if (!$toggleableElement.hasClass('acym_apply_data_abide_hide')) {
            $toggleableElement.find('input').attr('data-abide-ignore', '');
          }

          if (valueField) valueField.val(1);
        } else {
          $toggleableElement.show();

          if (!$toggleableElement.hasClass('acym_apply_data_abide_hide')) {
            $toggleableElement.find('input').removeAttr('data-abide-ignore');
          }

          if (valueField) valueField.val(0);
        }
      });
    });
    toggleCheckboxes.trigger('change');
  },
  setSwitchToggle: function setSwitchToggle() {
    var $switchToggle = jQuery('[data-toggle-switch]:not([data-toggle-switch=""])');
    $switchToggle.off('change').on('change', function () {
      var $open = jQuery(this).attr('data-toggle-switch-open'); // I know it seems weird but the foundation's switch triggers the hidden input's onchange before updating its data :/

      if (jQuery(this).val() != 1 && $open == 'show' || jQuery(this).val() == 1 && $open == 'hide') {
        jQuery('#' + jQuery(this).attr('data-toggle-switch')).show();
      } else {
        jQuery('#' + jQuery(this).attr('data-toggle-switch')).hide();
      }
    });
    $switchToggle.each(function (index) {
      var $open = jQuery(this).attr('data-toggle-switch-open');

      if (jQuery(this).val() == 1 && $open == 'show' || jQuery(this).val() != 1 && $open == 'hide') {
        jQuery('#' + jQuery(this).attr('data-toggle-switch')).show();
      } else {
        jQuery('#' + jQuery(this).attr('data-toggle-switch')).hide();
      }
    });
  },
  setToggleArrow: function setToggleArrow() {
    jQuery('.acym__toggle__arrow .acym__toggle__arrow__trigger').off('click').on('click', function () {
      var $textarea = jQuery(this).closest('.acym__toggle__arrow').children('.acym__toggle__arrow__contain');

      if ($textarea.is(':visible')) {
        $textarea.hide();
        jQuery(this).find('i').removeClass('acymicon-keyboard_arrow_up').addClass('acymicon-keyboard_arrow_down');
      } else {
        $textarea.show();
        jQuery(this).find('i').removeClass('acymicon-keyboard_arrow_down').addClass('acymicon-keyboard_arrow_up');
      }
    });
  },
  setSelectToggle: function setSelectToggle() {
    var $selectToggle = jQuery('[data-toggle-select]:not([data-toggle-select=""])');
    $selectToggle.on('change', function () {
      var association = acym_helper.parseJson(jQuery(this).attr('data-toggle-select'));
      var currentValue = jQuery(this).val();
      jQuery.each(association, function (value, element) {
        if (value != currentValue) {
          jQuery(element).hide();
        } else {
          jQuery(element).show();
        }
      });
    }).trigger('change');
  }
};
var acym_helperToolbar = {
  initToolbar: function initToolbar() {
    this.setMoreOptionsButtons();
    this.setStatusOnload();
  },
  setMoreOptionsButtons: function setMoreOptionsButtons() {
    var $moreOptionsButton = jQuery('#acym__toolbar__button-more-filters');
    var $moreOptionsDiv = jQuery('.acym__toolbar__more-filters');
    var $applyButton = jQuery('#acym__toolbar__more-filters-apply');
    $moreOptionsButton.off('click').on('click', function () {
      $moreOptionsDiv.toggle();

      if ($moreOptionsDiv.is(':visible')) {
        $moreOptionsButton.addClass('toggled');
        $moreOptionsButton.html('<i class="acymicon-filter"></i>' + ACYM_JS_TXT.ACYM_HIDE_FILTERS);
      } else {
        $moreOptionsButton.removeClass('toggled');
        $moreOptionsButton.html('<i class="acymicon-filter"></i>' + ACYM_JS_TXT.ACYM_SHOW_FILTERS);
      }
    });
    $applyButton.off('click').on('click', function () {
      jQuery('#acym_form').submit();
    });
  },
  setStatusOnload: function setStatusOnload() {
    var statuses = jQuery('#acym__toolbar__statuses-value').val();
    if (undefined === statuses || '' === statuses) return;
    statuses = acym_helper.parseJson(statuses);
    Object.keys(statuses).map(function (status) {
      var $input = jQuery('[name="' + status + '"]');
      if ($input.length === 0) return false;
      $input.val(statuses[status]);
    });
    jQuery('#acym__toolbar__button-more-filters').click();
  }
};
var acym_helperTooltip = {
  setTooltip: function setTooltip() {
    jQuery('.acym__tooltip, [data-acym-tooltip]').off('mouseenter').on('mouseenter', function () {
      if (undefined !== jQuery(this).attr('data-acym-tooltip')) {
        jQuery(this).addClass('acym__tooltip');
        var position = jQuery(this).attr('data-acym-tooltip-position') !== undefined ? 'acym__tooltip__text__' + jQuery(this).attr('data-acym-tooltip-position') : '';

        if (jQuery(this).find('.acym__tooltip__text').length == 0) {
          jQuery(this).append('<span class="acym__tooltip__text ' + position + '">' + jQuery(this).attr('data-acym-tooltip') + '</span>');
        }
      }

      acym_helperTooltip.setPositionTooltip(jQuery(this).find('.acym__tooltip__text'), jQuery(this));
    });
  },
  setPositionTooltip: function setPositionTooltip($tooltipText, $parent) {
    if ($tooltipText.hasClass('wysid_tooltip')) {
      $tooltipText.css({
        position: 'absolute',
        top: $parent.outerHeight() + 14 + 'px',
        left: '-' + (250 - $parent.outerWidth()) / 2 + 'px',
        width: '250px'
      });
      return;
    }

    var pos = $parent.offset();
    var scrollTop = jQuery(window).scrollTop();
    var top = pos.top - scrollTop;
    var newTop, newLeft;

    if ($tooltipText.hasClass('acym__tooltip__text__right')) {
      newTop = top - $tooltipText.height() < 0 ? 0 : top - $tooltipText.height();
      newLeft = pos.left + $parent.width() + 10 < 0 ? 0 : pos.left + $parent.width() + 10;
    } else if ($tooltipText.hasClass('acym__tooltip__text__left')) {
      newTop = top - $tooltipText.height() < 0 ? 0 : top - $tooltipText.height();
      newLeft = pos.left - $tooltipText.width() - $parent.width() - 10 < 0 ? 0 : pos.left - $tooltipText.width() - $parent.width() - 10;
    } else {
      newTop = Math.max(0, top - $tooltipText.height() - 15);
      newLeft = Math.max(0, pos.left - $tooltipText.width() / 2 + $parent.width() / 2);
    }

    $tooltipText.css({
      top: newTop + 'px',
      left: newLeft + 'px'
    });
  },
  addTooltip: function addTooltip(hoveredText, textShownInTooltip, classContainer, classText) {
    return "<span class=\"acym__tooltip ".concat(classContainer, "\"><span class=\"acym__tooltip__text ").concat(classText, "\">").concat(textShownInTooltip, "</span>").concat(hoveredText, "</span>");
  },
  addInfo: function addInfo(tooltipText, classText) {
    classText = classText === undefined ? '' : classText;
    return this.addTooltip("<span class=\"acym__tooltip__info__container\"><i class=\"acym__tooltip__info__icon acymicon-info-circle\"></i></span>", tooltipText, 'acym__tooltip__info', classText);
  }
};
var acym_helperUser = {
  setSubscribeUnsubscribeUser: function setSubscribeUnsubscribeUser() {
    var form = jQuery('#acym_form');
    jQuery('.acym__user__action--subscribe').off('click').on('click', function () {
      jQuery('[name="acym__entity_select__selected"]').val(jQuery(this).attr('id'));
      form.find('[name="task"]').attr('value', 'subscribeUser');
      form.submit();
    });
    jQuery('.acym__user__action--unsubscribe').off('click').on('click', function () {
      jQuery('[name="acym__entity_select__selected"]').val(jQuery(this).attr('id'));
      form.find('[name="task"]').attr('value', 'unsubscribeUser');
      form.submit();
    });
    jQuery('.acym__user__action--unsubscribeall').off('click').on('click', function () {
      form.find('[name="task"]').attr('value', 'unsubscribeUserFromAll');
      form.submit();
    });
    jQuery('.acym__user__action--resubscribeall').off('click').on('click', function () {
      form.find('[name="task"]').attr('value', 'resubscribeUserToAll');
      form.submit();
    });
  }
};